// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/plugin.proto

package com.akaxin.proto.core;

public final class PluginProto {
  private PluginProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   *header 里面
   * </pre>
   *
   * Protobuf enum {@code core.PluginHeaderKey}
   */
  public enum PluginHeaderKey
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>CLIENT_VERSION = 0;</code>
     */
    CLIENT_VERSION(0),
    /**
     * <pre>
     *当前客户端用户ID
     * </pre>
     *
     * <code>CLIENT_SITE_USER_ID = 1;</code>
     */
    CLIENT_SITE_USER_ID(1),
    /**
     * <pre>
     *当前用户的sessionID
     * </pre>
     *
     * <code>CLIENT_SITE_SESSION_ID = 2;</code>
     */
    CLIENT_SITE_SESSION_ID(2),
    /**
     * <pre>
     *使用zaly:goto
     * </pre>
     *
     * <code>PLUGIN_REFERER = 3;</code>
     */
    PLUGIN_REFERER(3),
    /**
     * <pre>
     *单位ms
     * </pre>
     *
     * <code>PLUGIN_TIMESTAMP = 4;</code>
     */
    PLUGIN_TIMESTAMP(4),
    /**
     * <pre>
     *扩展的ID
     * </pre>
     *
     * <code>PLUGIN_ID = 5;</code>
     */
    PLUGIN_ID(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>CLIENT_VERSION = 0;</code>
     */
    public static final int CLIENT_VERSION_VALUE = 0;
    /**
     * <pre>
     *当前客户端用户ID
     * </pre>
     *
     * <code>CLIENT_SITE_USER_ID = 1;</code>
     */
    public static final int CLIENT_SITE_USER_ID_VALUE = 1;
    /**
     * <pre>
     *当前用户的sessionID
     * </pre>
     *
     * <code>CLIENT_SITE_SESSION_ID = 2;</code>
     */
    public static final int CLIENT_SITE_SESSION_ID_VALUE = 2;
    /**
     * <pre>
     *使用zaly:goto
     * </pre>
     *
     * <code>PLUGIN_REFERER = 3;</code>
     */
    public static final int PLUGIN_REFERER_VALUE = 3;
    /**
     * <pre>
     *单位ms
     * </pre>
     *
     * <code>PLUGIN_TIMESTAMP = 4;</code>
     */
    public static final int PLUGIN_TIMESTAMP_VALUE = 4;
    /**
     * <pre>
     *扩展的ID
     * </pre>
     *
     * <code>PLUGIN_ID = 5;</code>
     */
    public static final int PLUGIN_ID_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static PluginHeaderKey valueOf(int value) {
      return forNumber(value);
    }

    public static PluginHeaderKey forNumber(int value) {
      switch (value) {
        case 0: return CLIENT_VERSION;
        case 1: return CLIENT_SITE_USER_ID;
        case 2: return CLIENT_SITE_SESSION_ID;
        case 3: return PLUGIN_REFERER;
        case 4: return PLUGIN_TIMESTAMP;
        case 5: return PLUGIN_ID;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PluginHeaderKey>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PluginHeaderKey> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PluginHeaderKey>() {
            public PluginHeaderKey findValueByNumber(int number) {
              return PluginHeaderKey.forNumber(number);
            }
          };

    private final int value;

    private PluginHeaderKey(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:core.PluginHeaderKey)
  }

  /**
   * Protobuf enum {@code core.PermissionStatus}
   */
  public enum PermissionStatus
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     *禁用状态
     * </pre>
     *
     * <code>DISABLED = 0;</code>
     */
    DISABLED(0),
    /**
     * <pre>
     *可用状态
     * </pre>
     *
     * <code>AVAILABLE = 1;</code>
     */
    AVAILABLE(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *禁用状态
     * </pre>
     *
     * <code>DISABLED = 0;</code>
     */
    public static final int DISABLED_VALUE = 0;
    /**
     * <pre>
     *可用状态
     * </pre>
     *
     * <code>AVAILABLE = 1;</code>
     */
    public static final int AVAILABLE_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static PermissionStatus valueOf(int value) {
      return forNumber(value);
    }

    public static PermissionStatus forNumber(int value) {
      switch (value) {
        case 0: return DISABLED;
        case 1: return AVAILABLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PermissionStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PermissionStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PermissionStatus>() {
            public PermissionStatus findValueByNumber(int number) {
              return PermissionStatus.forNumber(number);
            }
          };

    private final int value;

    private PermissionStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:core.PermissionStatus)
  }

  /**
   * Protobuf enum {@code core.PluginPosition}
   */
  public enum PluginPosition
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     *首页位置
     * </pre>
     *
     * <code>HOME_PAGE = 0;</code>
     */
    HOME_PAGE(0),
    /**
     * <pre>
     *消息帧位置
     * </pre>
     *
     * <code>MSG_PAGE = 1;</code>
     */
    MSG_PAGE(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *首页位置
     * </pre>
     *
     * <code>HOME_PAGE = 0;</code>
     */
    public static final int HOME_PAGE_VALUE = 0;
    /**
     * <pre>
     *消息帧位置
     * </pre>
     *
     * <code>MSG_PAGE = 1;</code>
     */
    public static final int MSG_PAGE_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static PluginPosition valueOf(int value) {
      return forNumber(value);
    }

    public static PluginPosition forNumber(int value) {
      switch (value) {
        case 0: return HOME_PAGE;
        case 1: return MSG_PAGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PluginPosition>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PluginPosition> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PluginPosition>() {
            public PluginPosition findValueByNumber(int number) {
              return PluginPosition.forNumber(number);
            }
          };

    private final int value;

    private PluginPosition(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:core.PluginPosition)
  }

  /**
   * Protobuf enum {@code core.PluginDisplayMode}
   */
  public enum PluginDisplayMode
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     *默认，新页面
     * </pre>
     *
     * <code>NEW_PAGE = 0;</code>
     */
    NEW_PAGE(0),
    /**
     * <pre>
     *浮屏
     * </pre>
     *
     * <code>FLOATING_SCREEN = 1;</code>
     */
    FLOATING_SCREEN(1),
    /**
     * <pre>
     *分屏
     * </pre>
     *
     * <code>SPLIT_SCREEN = 2;</code>
     */
    SPLIT_SCREEN(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *默认，新页面
     * </pre>
     *
     * <code>NEW_PAGE = 0;</code>
     */
    public static final int NEW_PAGE_VALUE = 0;
    /**
     * <pre>
     *浮屏
     * </pre>
     *
     * <code>FLOATING_SCREEN = 1;</code>
     */
    public static final int FLOATING_SCREEN_VALUE = 1;
    /**
     * <pre>
     *分屏
     * </pre>
     *
     * <code>SPLIT_SCREEN = 2;</code>
     */
    public static final int SPLIT_SCREEN_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static PluginDisplayMode valueOf(int value) {
      return forNumber(value);
    }

    public static PluginDisplayMode forNumber(int value) {
      switch (value) {
        case 0: return NEW_PAGE;
        case 1: return FLOATING_SCREEN;
        case 2: return SPLIT_SCREEN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PluginDisplayMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PluginDisplayMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PluginDisplayMode>() {
            public PluginDisplayMode findValueByNumber(int number) {
              return PluginDisplayMode.forNumber(number);
            }
          };

    private final int value;

    private PluginDisplayMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:core.PluginDisplayMode)
  }

  public interface ProxyPluginPackageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:core.ProxyPluginPackage)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */
    int getPluginHeaderCount();
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */
    boolean containsPluginHeader(
            int key);
    /**
     * Use {@link #getPluginHeaderMap()} instead.
     */
    @Deprecated
    java.util.Map<Integer, String>
    getPluginHeader();
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */
    java.util.Map<Integer, String>
    getPluginHeaderMap();
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */

    String getPluginHeaderOrDefault(
            int key,
            String defaultValue);
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */

    String getPluginHeaderOrThrow(
            int key);

    /**
     * <pre>
     *data在赋值之前先base64
     *site -&gt; plugin 是开发者自定义的格式
     *plugin -&gt; site 为具体请求的proto格式
     * </pre>
     *
     * <code>optional string data = 2;</code>
     */
    String getData();
    /**
     * <pre>
     *data在赋值之前先base64
     *site -&gt; plugin 是开发者自定义的格式
     *plugin -&gt; site 为具体请求的proto格式
     * </pre>
     *
     * <code>optional string data = 2;</code>
     */
    com.google.protobuf.ByteString
        getDataBytes();

    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    boolean hasErrorInfo();
    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    com.akaxin.proto.core.CoreProto.ErrorInfo getErrorInfo();
  }
  /**
   * <pre>
   * site 与plugin之间交互传输的package包
   * </pre>
   *
   * Protobuf type {@code core.ProxyPluginPackage}
   */
  public  static final class ProxyPluginPackage extends
      com.google.protobuf.GeneratedMessageLite<
          ProxyPluginPackage, ProxyPluginPackage.Builder> implements
      // @@protoc_insertion_point(message_implements:core.ProxyPluginPackage)
      ProxyPluginPackageOrBuilder {
    private ProxyPluginPackage() {
      data_ = "";
    }
    private int bitField0_;
    public static final int PLUGIN_HEADER_FIELD_NUMBER = 1;
    private static final class PluginHeaderDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          Integer, String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<Integer, String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        Integer, String> pluginHeader_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<Integer, String>
    internalGetPluginHeader() {
      return pluginHeader_;
    }
    private com.google.protobuf.MapFieldLite<Integer, String>
    internalGetMutablePluginHeader() {
      if (!pluginHeader_.isMutable()) {
        pluginHeader_ = pluginHeader_.mutableCopy();
      }
      return pluginHeader_;
    }

    public int getPluginHeaderCount() {
      return internalGetPluginHeader().size();
    }
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */

    public boolean containsPluginHeader(
        int key) {

      return internalGetPluginHeader().containsKey(key);
    }
    /**
     * Use {@link #getPluginHeaderMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, String> getPluginHeader() {
      return getPluginHeaderMap();
    }
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */

    public java.util.Map<Integer, String> getPluginHeaderMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetPluginHeader());
    }
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */

    public String getPluginHeaderOrDefault(
        int key,
        String defaultValue) {

      java.util.Map<Integer, String> map =
          internalGetPluginHeader();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */

    public String getPluginHeaderOrThrow(
        int key) {

      java.util.Map<Integer, String> map =
          internalGetPluginHeader();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     *header
     * </pre>
     *
     * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
     */
    private java.util.Map<Integer, String>
    getMutablePluginHeaderMap() {
      return internalGetMutablePluginHeader();
    }

    public static final int DATA_FIELD_NUMBER = 2;
    private String data_;
    /**
     * <pre>
     *data在赋值之前先base64
     *site -&gt; plugin 是开发者自定义的格式
     *plugin -&gt; site 为具体请求的proto格式
     * </pre>
     *
     * <code>optional string data = 2;</code>
     */
    public String getData() {
      return data_;
    }
    /**
     * <pre>
     *data在赋值之前先base64
     *site -&gt; plugin 是开发者自定义的格式
     *plugin -&gt; site 为具体请求的proto格式
     * </pre>
     *
     * <code>optional string data = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDataBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(data_);
    }
    /**
     * <pre>
     *data在赋值之前先base64
     *site -&gt; plugin 是开发者自定义的格式
     *plugin -&gt; site 为具体请求的proto格式
     * </pre>
     *
     * <code>optional string data = 2;</code>
     */
    private void setData(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      data_ = value;
    }
    /**
     * <pre>
     *data在赋值之前先base64
     *site -&gt; plugin 是开发者自定义的格式
     *plugin -&gt; site 为具体请求的proto格式
     * </pre>
     *
     * <code>optional string data = 2;</code>
     */
    private void clearData() {

      data_ = getDefaultInstance().getData();
    }
    /**
     * <pre>
     *data在赋值之前先base64
     *site -&gt; plugin 是开发者自定义的格式
     *plugin -&gt; site 为具体请求的proto格式
     * </pre>
     *
     * <code>optional string data = 2;</code>
     */
    private void setDataBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      data_ = value.toStringUtf8();
    }

    public static final int ERROR_INFO_FIELD_NUMBER = 3;
    private com.akaxin.proto.core.CoreProto.ErrorInfo errorInfo_;
    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    public boolean hasErrorInfo() {
      return errorInfo_ != null;
    }
    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    public com.akaxin.proto.core.CoreProto.ErrorInfo getErrorInfo() {
      return errorInfo_ == null ? com.akaxin.proto.core.CoreProto.ErrorInfo.getDefaultInstance() : errorInfo_;
    }
    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    private void setErrorInfo(com.akaxin.proto.core.CoreProto.ErrorInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      errorInfo_ = value;

      }
    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    private void setErrorInfo(
        com.akaxin.proto.core.CoreProto.ErrorInfo.Builder builderForValue) {
      errorInfo_ = builderForValue.build();

    }
    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    private void mergeErrorInfo(com.akaxin.proto.core.CoreProto.ErrorInfo value) {
      if (errorInfo_ != null &&
          errorInfo_ != com.akaxin.proto.core.CoreProto.ErrorInfo.getDefaultInstance()) {
        errorInfo_ =
          com.akaxin.proto.core.CoreProto.ErrorInfo.newBuilder(errorInfo_).mergeFrom(value).buildPartial();
      } else {
        errorInfo_ = value;
      }

    }
    /**
     * <pre>
     *error信息
     * </pre>
     *
     * <code>optional .core.ErrorInfo error_info = 3;</code>
     */
    private void clearErrorInfo() {  errorInfo_ = null;

    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (java.util.Map.Entry<Integer, String> entry
           : internalGetPluginHeader().entrySet()) {
        PluginHeaderDefaultEntryHolder.defaultEntry.serializeTo(
            output, 1, entry.getKey(), entry.getValue());
      }
      if (!data_.isEmpty()) {
        output.writeString(2, getData());
      }
      if (errorInfo_ != null) {
        output.writeMessage(3, getErrorInfo());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<Integer, String> entry
           : internalGetPluginHeader().entrySet()) {
        size += PluginHeaderDefaultEntryHolder.defaultEntry.computeMessageSize(
          1, entry.getKey(), entry.getValue());
      }
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getData());
      }
      if (errorInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getErrorInfo());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akaxin.proto.core.PluginProto.ProxyPluginPackage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * site 与plugin之间交互传输的package包
     * </pre>
     *
     * Protobuf type {@code core.ProxyPluginPackage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          ProxyPluginPackage, Builder> implements
        // @@protoc_insertion_point(builder_implements:core.ProxyPluginPackage)
        com.akaxin.proto.core.PluginProto.ProxyPluginPackageOrBuilder {
      // Construct using com.akaxin.proto.core.PluginProto.ProxyPluginPackage.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }



      public int getPluginHeaderCount() {
        return instance.getPluginHeaderMap().size();
      }
      /**
       * <pre>
       *header
       * </pre>
       *
       * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
       */

      public boolean containsPluginHeader(
          int key) {

        return instance.getPluginHeaderMap().containsKey(key);
      }

      public Builder clearPluginHeader() {
        copyOnWrite();
        instance.getMutablePluginHeaderMap().clear();
        return this;
      }
      /**
       * <pre>
       *header
       * </pre>
       *
       * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
       */

      public Builder removePluginHeader(
          int key) {

        copyOnWrite();
        instance.getMutablePluginHeaderMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getPluginHeaderMap()} instead.
       */
      @Deprecated
      public java.util.Map<Integer, String> getPluginHeader() {
        return getPluginHeaderMap();
      }
      /**
       * <pre>
       *header
       * </pre>
       *
       * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
       */
      public java.util.Map<Integer, String> getPluginHeaderMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getPluginHeaderMap());
      }
      /**
       * <pre>
       *header
       * </pre>
       *
       * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
       */

      public String getPluginHeaderOrDefault(
          int key,
          String defaultValue) {

        java.util.Map<Integer, String> map =
            instance.getPluginHeaderMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *header
       * </pre>
       *
       * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
       */

      public String getPluginHeaderOrThrow(
          int key) {

        java.util.Map<Integer, String> map =
            instance.getPluginHeaderMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       *header
       * </pre>
       *
       * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
       */
      public Builder putPluginHeader(
          int key,
          String value) {

        if (value == null) { throw new NullPointerException(); }
        copyOnWrite();
        instance.getMutablePluginHeaderMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       *header
       * </pre>
       *
       * <code>map&lt;int32, string&gt; plugin_header = 1;</code>
       */
      public Builder putAllPluginHeader(
          java.util.Map<Integer, String> values) {
        copyOnWrite();
        instance.getMutablePluginHeaderMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       *data在赋值之前先base64
       *site -&gt; plugin 是开发者自定义的格式
       *plugin -&gt; site 为具体请求的proto格式
       * </pre>
       *
       * <code>optional string data = 2;</code>
       */
      public String getData() {
        return instance.getData();
      }
      /**
       * <pre>
       *data在赋值之前先base64
       *site -&gt; plugin 是开发者自定义的格式
       *plugin -&gt; site 为具体请求的proto格式
       * </pre>
       *
       * <code>optional string data = 2;</code>
       */
      public com.google.protobuf.ByteString
          getDataBytes() {
        return instance.getDataBytes();
      }
      /**
       * <pre>
       *data在赋值之前先base64
       *site -&gt; plugin 是开发者自定义的格式
       *plugin -&gt; site 为具体请求的proto格式
       * </pre>
       *
       * <code>optional string data = 2;</code>
       */
      public Builder setData(
          String value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <pre>
       *data在赋值之前先base64
       *site -&gt; plugin 是开发者自定义的格式
       *plugin -&gt; site 为具体请求的proto格式
       * </pre>
       *
       * <code>optional string data = 2;</code>
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }
      /**
       * <pre>
       *data在赋值之前先base64
       *site -&gt; plugin 是开发者自定义的格式
       *plugin -&gt; site 为具体请求的proto格式
       * </pre>
       *
       * <code>optional string data = 2;</code>
       */
      public Builder setDataBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDataBytes(value);
        return this;
      }

      /**
       * <pre>
       *error信息
       * </pre>
       *
       * <code>optional .core.ErrorInfo error_info = 3;</code>
       */
      public boolean hasErrorInfo() {
        return instance.hasErrorInfo();
      }
      /**
       * <pre>
       *error信息
       * </pre>
       *
       * <code>optional .core.ErrorInfo error_info = 3;</code>
       */
      public com.akaxin.proto.core.CoreProto.ErrorInfo getErrorInfo() {
        return instance.getErrorInfo();
      }
      /**
       * <pre>
       *error信息
       * </pre>
       *
       * <code>optional .core.ErrorInfo error_info = 3;</code>
       */
      public Builder setErrorInfo(com.akaxin.proto.core.CoreProto.ErrorInfo value) {
        copyOnWrite();
        instance.setErrorInfo(value);
        return this;
        }
      /**
       * <pre>
       *error信息
       * </pre>
       *
       * <code>optional .core.ErrorInfo error_info = 3;</code>
       */
      public Builder setErrorInfo(
          com.akaxin.proto.core.CoreProto.ErrorInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setErrorInfo(builderForValue);
        return this;
      }
      /**
       * <pre>
       *error信息
       * </pre>
       *
       * <code>optional .core.ErrorInfo error_info = 3;</code>
       */
      public Builder mergeErrorInfo(com.akaxin.proto.core.CoreProto.ErrorInfo value) {
        copyOnWrite();
        instance.mergeErrorInfo(value);
        return this;
      }
      /**
       * <pre>
       *error信息
       * </pre>
       *
       * <code>optional .core.ErrorInfo error_info = 3;</code>
       */
      public Builder clearErrorInfo() {  copyOnWrite();
        instance.clearErrorInfo();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:core.ProxyPluginPackage)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.akaxin.proto.core.PluginProto.ProxyPluginPackage();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pluginHeader_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.akaxin.proto.core.PluginProto.ProxyPluginPackage other = (com.akaxin.proto.core.PluginProto.ProxyPluginPackage) arg1;
          pluginHeader_ = visitor.visitMap(
              pluginHeader_, other.internalGetPluginHeader());
          data_ = visitor.visitString(!data_.isEmpty(), data_,
              !other.data_.isEmpty(), other.data_);
          errorInfo_ = visitor.visitMessage(errorInfo_, other.errorInfo_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!pluginHeader_.isMutable()) {
                    pluginHeader_ = pluginHeader_.mutableCopy();
                  }
                  PluginHeaderDefaultEntryHolder.defaultEntry.parseInto(pluginHeader_, input, extensionRegistry);  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  data_ = s;
                  break;
                }
                case 26: {
                  com.akaxin.proto.core.CoreProto.ErrorInfo.Builder subBuilder = null;
                  if (errorInfo_ != null) {
                    subBuilder = errorInfo_.toBuilder();
                  }
                  errorInfo_ = input.readMessage(com.akaxin.proto.core.CoreProto.ErrorInfo.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(errorInfo_);
                    errorInfo_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.akaxin.proto.core.PluginProto.ProxyPluginPackage.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:core.ProxyPluginPackage)
    private static final com.akaxin.proto.core.PluginProto.ProxyPluginPackage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ProxyPluginPackage();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.akaxin.proto.core.PluginProto.ProxyPluginPackage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ProxyPluginPackage> PARSER;

    public static com.google.protobuf.Parser<ProxyPluginPackage> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PluginOrBuilder extends
      // @@protoc_insertion_point(interface_extends:core.Plugin)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * 对于一个特定的Site，plugin.id 是唯一的。
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    String getId();
    /**
     * <pre>
     * 对于一个特定的Site，plugin.id 是唯一的。
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * 扩展名字，会显示在界面上
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    String getName();
    /**
     * <pre>
     * 扩展名字，会显示在界面上
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * 落地页地址
     * 以http或https开头，客户端直接以url_page作为网址渲染webview
     * 否则，为api.proxy.page 请求的page参数值，默认为空
     * 如：
     * value= https://www.google.com 直接以此网址加载webview。
     * value= main，代表通过api.proxy.page接口请求main页面。
     * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
     * </pre>
     *
     * <code>optional string url_page = 3;</code>
     */
    String getUrlPage();
    /**
     * <pre>
     * 落地页地址
     * 以http或https开头，客户端直接以url_page作为网址渲染webview
     * 否则，为api.proxy.page 请求的page参数值，默认为空
     * 如：
     * value= https://www.google.com 直接以此网址加载webview。
     * value= main，代表通过api.proxy.page接口请求main页面。
     * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
     * </pre>
     *
     * <code>optional string url_page = 3;</code>
     */
    com.google.protobuf.ByteString
        getUrlPageBytes();

    /**
     * <pre>
     * api.plugin.proxy 请求转发请求时的目的URL
     * 此URL只能以http或者https开头，如无则为http
     * ====IMPORTANT====
     * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
     * </pre>
     *
     * <code>optional string api_url = 4;</code>
     */
    String getApiUrl();
    /**
     * <pre>
     * api.plugin.proxy 请求转发请求时的目的URL
     * 此URL只能以http或者https开头，如无则为http
     * ====IMPORTANT====
     * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
     * </pre>
     *
     * <code>optional string api_url = 4;</code>
     */
    com.google.protobuf.ByteString
        getApiUrlBytes();

    /**
     * <pre>
     * 扩展图标文件，会显示在界面上
     * 如果以http开头，则代表着这是一个http协议的文件。
     * 否则，通过site-download功能下载此图片。
     * </pre>
     *
     * <code>optional string icon = 5;</code>
     */
    String getIcon();
    /**
     * <pre>
     * 扩展图标文件，会显示在界面上
     * 如果以http开头，则代表着这是一个http协议的文件。
     * 否则，通过site-download功能下载此图片。
     * </pre>
     *
     * <code>optional string icon = 5;</code>
     */
    com.google.protobuf.ByteString
        getIconBytes();

    /**
     * <pre>
     * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
     * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
     * site 使用auth_key 加密发送给plugin的整个proto
     * 同时 site使用auth_key解析 plugin传递过来的具体proto值
     * </pre>
     *
     * <code>optional string auth_key = 6;</code>
     */
    String getAuthKey();
    /**
     * <pre>
     * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
     * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
     * site 使用auth_key 加密发送给plugin的整个proto
     * 同时 site使用auth_key解析 plugin传递过来的具体proto值
     * </pre>
     *
     * <code>optional string auth_key = 6;</code>
     */
    com.google.protobuf.ByteString
        getAuthKeyBytes();

    /**
     * <pre>
     * site server的innerAPI允许的pluginServer地址。
     * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
     * 如果有多个ip，以英文逗号[,]隔开。
     * </pre>
     *
     * <code>optional string allowed_ip = 7;</code>
     */
    String getAllowedIp();
    /**
     * <pre>
     * site server的innerAPI允许的pluginServer地址。
     * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
     * 如果有多个ip，以英文逗号[,]隔开。
     * </pre>
     *
     * <code>optional string allowed_ip = 7;</code>
     */
    com.google.protobuf.ByteString
        getAllowedIpBytes();

    /**
     * <pre>
     * 扩展的位置【应该为一个枚举】
     * 值：首页、消息帧
     * 本次不允许首页并且消息帧这个类型。
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 8;</code>
     */
    int getPositionValue();
    /**
     * <pre>
     * 扩展的位置【应该为一个枚举】
     * 值：首页、消息帧
     * 本次不允许首页并且消息帧这个类型。
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 8;</code>
     */
    com.akaxin.proto.core.PluginProto.PluginPosition getPosition();

    /**
     * <pre>
     * 显示顺序
     * 当一个位置，有多个扩展时，此处描述顺序，数字越小，排列越靠前（从上往下，从左往右排列）
     * </pre>
     *
     * <code>optional int32 order = 9;</code>
     */
    int getOrder();

    /**
     * <pre>
     * 展现方式【应该为一个枚举】
     * 默认、浮屏、分屏
     * 目前写死【默认】
     * </pre>
     *
     * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
     */
    int getDisplayModeValue();
    /**
     * <pre>
     * 展现方式【应该为一个枚举】
     * 默认、浮屏、分屏
     * 目前写死【默认】
     * </pre>
     *
     * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
     */
    com.akaxin.proto.core.PluginProto.PluginDisplayMode getDisplayMode();

    /**
     * <pre>
     * 可用状态
     * - 禁用
     * - 管理员可用
     * - 全员可用
     * </pre>
     *
     * <code>optional .core.PermissionStatus permission_status = 11;</code>
     */
    int getPermissionStatusValue();
    /**
     * <pre>
     * 可用状态
     * - 禁用
     * - 管理员可用
     * - 全员可用
     * </pre>
     *
     * <code>optional .core.PermissionStatus permission_status = 11;</code>
     */
    com.akaxin.proto.core.PluginProto.PermissionStatus getPermissionStatus();

    /**
     * <pre>
     * 使用auth_key加密的用户session
     * </pre>
     *
     * <code>optional string encrypted_session_id_base64 = 12;</code>
     */
    String getEncryptedSessionIdBase64();
    /**
     * <pre>
     * 使用auth_key加密的用户session
     * </pre>
     *
     * <code>optional string encrypted_session_id_base64 = 12;</code>
     */
    com.google.protobuf.ByteString
        getEncryptedSessionIdBase64Bytes();
  }
  /**
   * Protobuf type {@code core.Plugin}
   */
  public  static final class Plugin extends
      com.google.protobuf.GeneratedMessageLite<
          Plugin, Plugin.Builder> implements
      // @@protoc_insertion_point(message_implements:core.Plugin)
      PluginOrBuilder {
    private Plugin() {
      id_ = "";
      name_ = "";
      urlPage_ = "";
      apiUrl_ = "";
      icon_ = "";
      authKey_ = "";
      allowedIp_ = "";
      encryptedSessionIdBase64_ = "";
    }
    public static final int ID_FIELD_NUMBER = 1;
    private String id_;
    /**
     * <pre>
     * 对于一个特定的Site，plugin.id 是唯一的。
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public String getId() {
      return id_;
    }
    /**
     * <pre>
     * 对于一个特定的Site，plugin.id 是唯一的。
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(id_);
    }
    /**
     * <pre>
     * 对于一个特定的Site，plugin.id 是唯一的。
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    private void setId(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      id_ = value;
    }
    /**
     * <pre>
     * 对于一个特定的Site，plugin.id 是唯一的。
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    private void clearId() {

      id_ = getDefaultInstance().getId();
    }
    /**
     * <pre>
     * 对于一个特定的Site，plugin.id 是唯一的。
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    private void setIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      id_ = value.toStringUtf8();
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private String name_;
    /**
     * <pre>
     * 扩展名字，会显示在界面上
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public String getName() {
      return name_;
    }
    /**
     * <pre>
     * 扩展名字，会显示在界面上
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * 扩展名字，会显示在界面上
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    private void setName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      name_ = value;
    }
    /**
     * <pre>
     * 扩展名字，会显示在界面上
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    private void clearName() {

      name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * 扩展名字，会显示在界面上
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    private void setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      name_ = value.toStringUtf8();
    }

    public static final int URL_PAGE_FIELD_NUMBER = 3;
    private String urlPage_;
    /**
     * <pre>
     * 落地页地址
     * 以http或https开头，客户端直接以url_page作为网址渲染webview
     * 否则，为api.proxy.page 请求的page参数值，默认为空
     * 如：
     * value= https://www.google.com 直接以此网址加载webview。
     * value= main，代表通过api.proxy.page接口请求main页面。
     * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
     * </pre>
     *
     * <code>optional string url_page = 3;</code>
     */
    public String getUrlPage() {
      return urlPage_;
    }
    /**
     * <pre>
     * 落地页地址
     * 以http或https开头，客户端直接以url_page作为网址渲染webview
     * 否则，为api.proxy.page 请求的page参数值，默认为空
     * 如：
     * value= https://www.google.com 直接以此网址加载webview。
     * value= main，代表通过api.proxy.page接口请求main页面。
     * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
     * </pre>
     *
     * <code>optional string url_page = 3;</code>
     */
    public com.google.protobuf.ByteString
        getUrlPageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(urlPage_);
    }
    /**
     * <pre>
     * 落地页地址
     * 以http或https开头，客户端直接以url_page作为网址渲染webview
     * 否则，为api.proxy.page 请求的page参数值，默认为空
     * 如：
     * value= https://www.google.com 直接以此网址加载webview。
     * value= main，代表通过api.proxy.page接口请求main页面。
     * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
     * </pre>
     *
     * <code>optional string url_page = 3;</code>
     */
    private void setUrlPage(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      urlPage_ = value;
    }
    /**
     * <pre>
     * 落地页地址
     * 以http或https开头，客户端直接以url_page作为网址渲染webview
     * 否则，为api.proxy.page 请求的page参数值，默认为空
     * 如：
     * value= https://www.google.com 直接以此网址加载webview。
     * value= main，代表通过api.proxy.page接口请求main页面。
     * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
     * </pre>
     *
     * <code>optional string url_page = 3;</code>
     */
    private void clearUrlPage() {

      urlPage_ = getDefaultInstance().getUrlPage();
    }
    /**
     * <pre>
     * 落地页地址
     * 以http或https开头，客户端直接以url_page作为网址渲染webview
     * 否则，为api.proxy.page 请求的page参数值，默认为空
     * 如：
     * value= https://www.google.com 直接以此网址加载webview。
     * value= main，代表通过api.proxy.page接口请求main页面。
     * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
     * </pre>
     *
     * <code>optional string url_page = 3;</code>
     */
    private void setUrlPageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      urlPage_ = value.toStringUtf8();
    }

    public static final int API_URL_FIELD_NUMBER = 4;
    private String apiUrl_;
    /**
     * <pre>
     * api.plugin.proxy 请求转发请求时的目的URL
     * 此URL只能以http或者https开头，如无则为http
     * ====IMPORTANT====
     * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
     * </pre>
     *
     * <code>optional string api_url = 4;</code>
     */
    public String getApiUrl() {
      return apiUrl_;
    }
    /**
     * <pre>
     * api.plugin.proxy 请求转发请求时的目的URL
     * 此URL只能以http或者https开头，如无则为http
     * ====IMPORTANT====
     * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
     * </pre>
     *
     * <code>optional string api_url = 4;</code>
     */
    public com.google.protobuf.ByteString
        getApiUrlBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(apiUrl_);
    }
    /**
     * <pre>
     * api.plugin.proxy 请求转发请求时的目的URL
     * 此URL只能以http或者https开头，如无则为http
     * ====IMPORTANT====
     * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
     * </pre>
     *
     * <code>optional string api_url = 4;</code>
     */
    private void setApiUrl(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      apiUrl_ = value;
    }
    /**
     * <pre>
     * api.plugin.proxy 请求转发请求时的目的URL
     * 此URL只能以http或者https开头，如无则为http
     * ====IMPORTANT====
     * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
     * </pre>
     *
     * <code>optional string api_url = 4;</code>
     */
    private void clearApiUrl() {

      apiUrl_ = getDefaultInstance().getApiUrl();
    }
    /**
     * <pre>
     * api.plugin.proxy 请求转发请求时的目的URL
     * 此URL只能以http或者https开头，如无则为http
     * ====IMPORTANT====
     * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
     * </pre>
     *
     * <code>optional string api_url = 4;</code>
     */
    private void setApiUrlBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      apiUrl_ = value.toStringUtf8();
    }

    public static final int ICON_FIELD_NUMBER = 5;
    private String icon_;
    /**
     * <pre>
     * 扩展图标文件，会显示在界面上
     * 如果以http开头，则代表着这是一个http协议的文件。
     * 否则，通过site-download功能下载此图片。
     * </pre>
     *
     * <code>optional string icon = 5;</code>
     */
    public String getIcon() {
      return icon_;
    }
    /**
     * <pre>
     * 扩展图标文件，会显示在界面上
     * 如果以http开头，则代表着这是一个http协议的文件。
     * 否则，通过site-download功能下载此图片。
     * </pre>
     *
     * <code>optional string icon = 5;</code>
     */
    public com.google.protobuf.ByteString
        getIconBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(icon_);
    }
    /**
     * <pre>
     * 扩展图标文件，会显示在界面上
     * 如果以http开头，则代表着这是一个http协议的文件。
     * 否则，通过site-download功能下载此图片。
     * </pre>
     *
     * <code>optional string icon = 5;</code>
     */
    private void setIcon(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      icon_ = value;
    }
    /**
     * <pre>
     * 扩展图标文件，会显示在界面上
     * 如果以http开头，则代表着这是一个http协议的文件。
     * 否则，通过site-download功能下载此图片。
     * </pre>
     *
     * <code>optional string icon = 5;</code>
     */
    private void clearIcon() {

      icon_ = getDefaultInstance().getIcon();
    }
    /**
     * <pre>
     * 扩展图标文件，会显示在界面上
     * 如果以http开头，则代表着这是一个http协议的文件。
     * 否则，通过site-download功能下载此图片。
     * </pre>
     *
     * <code>optional string icon = 5;</code>
     */
    private void setIconBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      icon_ = value.toStringUtf8();
    }

    public static final int AUTH_KEY_FIELD_NUMBER = 6;
    private String authKey_;
    /**
     * <pre>
     * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
     * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
     * site 使用auth_key 加密发送给plugin的整个proto
     * 同时 site使用auth_key解析 plugin传递过来的具体proto值
     * </pre>
     *
     * <code>optional string auth_key = 6;</code>
     */
    public String getAuthKey() {
      return authKey_;
    }
    /**
     * <pre>
     * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
     * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
     * site 使用auth_key 加密发送给plugin的整个proto
     * 同时 site使用auth_key解析 plugin传递过来的具体proto值
     * </pre>
     *
     * <code>optional string auth_key = 6;</code>
     */
    public com.google.protobuf.ByteString
        getAuthKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(authKey_);
    }
    /**
     * <pre>
     * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
     * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
     * site 使用auth_key 加密发送给plugin的整个proto
     * 同时 site使用auth_key解析 plugin传递过来的具体proto值
     * </pre>
     *
     * <code>optional string auth_key = 6;</code>
     */
    private void setAuthKey(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      authKey_ = value;
    }
    /**
     * <pre>
     * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
     * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
     * site 使用auth_key 加密发送给plugin的整个proto
     * 同时 site使用auth_key解析 plugin传递过来的具体proto值
     * </pre>
     *
     * <code>optional string auth_key = 6;</code>
     */
    private void clearAuthKey() {

      authKey_ = getDefaultInstance().getAuthKey();
    }
    /**
     * <pre>
     * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
     * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
     * site 使用auth_key 加密发送给plugin的整个proto
     * 同时 site使用auth_key解析 plugin传递过来的具体proto值
     * </pre>
     *
     * <code>optional string auth_key = 6;</code>
     */
    private void setAuthKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      authKey_ = value.toStringUtf8();
    }

    public static final int ALLOWED_IP_FIELD_NUMBER = 7;
    private String allowedIp_;
    /**
     * <pre>
     * site server的innerAPI允许的pluginServer地址。
     * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
     * 如果有多个ip，以英文逗号[,]隔开。
     * </pre>
     *
     * <code>optional string allowed_ip = 7;</code>
     */
    public String getAllowedIp() {
      return allowedIp_;
    }
    /**
     * <pre>
     * site server的innerAPI允许的pluginServer地址。
     * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
     * 如果有多个ip，以英文逗号[,]隔开。
     * </pre>
     *
     * <code>optional string allowed_ip = 7;</code>
     */
    public com.google.protobuf.ByteString
        getAllowedIpBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(allowedIp_);
    }
    /**
     * <pre>
     * site server的innerAPI允许的pluginServer地址。
     * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
     * 如果有多个ip，以英文逗号[,]隔开。
     * </pre>
     *
     * <code>optional string allowed_ip = 7;</code>
     */
    private void setAllowedIp(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      allowedIp_ = value;
    }
    /**
     * <pre>
     * site server的innerAPI允许的pluginServer地址。
     * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
     * 如果有多个ip，以英文逗号[,]隔开。
     * </pre>
     *
     * <code>optional string allowed_ip = 7;</code>
     */
    private void clearAllowedIp() {

      allowedIp_ = getDefaultInstance().getAllowedIp();
    }
    /**
     * <pre>
     * site server的innerAPI允许的pluginServer地址。
     * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
     * 如果有多个ip，以英文逗号[,]隔开。
     * </pre>
     *
     * <code>optional string allowed_ip = 7;</code>
     */
    private void setAllowedIpBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      allowedIp_ = value.toStringUtf8();
    }

    public static final int POSITION_FIELD_NUMBER = 8;
    private int position_;
    /**
     * <pre>
     * 扩展的位置【应该为一个枚举】
     * 值：首页、消息帧
     * 本次不允许首页并且消息帧这个类型。
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 8;</code>
     */
    public int getPositionValue() {
      return position_;
    }
    /**
     * <pre>
     * 扩展的位置【应该为一个枚举】
     * 值：首页、消息帧
     * 本次不允许首页并且消息帧这个类型。
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 8;</code>
     */
    public com.akaxin.proto.core.PluginProto.PluginPosition getPosition() {
      com.akaxin.proto.core.PluginProto.PluginPosition result = com.akaxin.proto.core.PluginProto.PluginPosition.forNumber(position_);
      return result == null ? com.akaxin.proto.core.PluginProto.PluginPosition.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * 扩展的位置【应该为一个枚举】
     * 值：首页、消息帧
     * 本次不允许首页并且消息帧这个类型。
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 8;</code>
     */
    private void setPositionValue(int value) {
        position_ = value;
    }
    /**
     * <pre>
     * 扩展的位置【应该为一个枚举】
     * 值：首页、消息帧
     * 本次不允许首页并且消息帧这个类型。
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 8;</code>
     */
    private void setPosition(com.akaxin.proto.core.PluginProto.PluginPosition value) {
      if (value == null) {
        throw new NullPointerException();
      }

      position_ = value.getNumber();
    }
    /**
     * <pre>
     * 扩展的位置【应该为一个枚举】
     * 值：首页、消息帧
     * 本次不允许首页并且消息帧这个类型。
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 8;</code>
     */
    private void clearPosition() {

      position_ = 0;
    }

    public static final int ORDER_FIELD_NUMBER = 9;
    private int order_;
    /**
     * <pre>
     * 显示顺序
     * 当一个位置，有多个扩展时，此处描述顺序，数字越小，排列越靠前（从上往下，从左往右排列）
     * </pre>
     *
     * <code>optional int32 order = 9;</code>
     */
    public int getOrder() {
      return order_;
    }
    /**
     * <pre>
     * 显示顺序
     * 当一个位置，有多个扩展时，此处描述顺序，数字越小，排列越靠前（从上往下，从左往右排列）
     * </pre>
     *
     * <code>optional int32 order = 9;</code>
     */
    private void setOrder(int value) {

      order_ = value;
    }
    /**
     * <pre>
     * 显示顺序
     * 当一个位置，有多个扩展时，此处描述顺序，数字越小，排列越靠前（从上往下，从左往右排列）
     * </pre>
     *
     * <code>optional int32 order = 9;</code>
     */
    private void clearOrder() {

      order_ = 0;
    }

    public static final int DISPLAY_MODE_FIELD_NUMBER = 10;
    private int displayMode_;
    /**
     * <pre>
     * 展现方式【应该为一个枚举】
     * 默认、浮屏、分屏
     * 目前写死【默认】
     * </pre>
     *
     * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
     */
    public int getDisplayModeValue() {
      return displayMode_;
    }
    /**
     * <pre>
     * 展现方式【应该为一个枚举】
     * 默认、浮屏、分屏
     * 目前写死【默认】
     * </pre>
     *
     * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
     */
    public com.akaxin.proto.core.PluginProto.PluginDisplayMode getDisplayMode() {
      com.akaxin.proto.core.PluginProto.PluginDisplayMode result = com.akaxin.proto.core.PluginProto.PluginDisplayMode.forNumber(displayMode_);
      return result == null ? com.akaxin.proto.core.PluginProto.PluginDisplayMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * 展现方式【应该为一个枚举】
     * 默认、浮屏、分屏
     * 目前写死【默认】
     * </pre>
     *
     * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
     */
    private void setDisplayModeValue(int value) {
        displayMode_ = value;
    }
    /**
     * <pre>
     * 展现方式【应该为一个枚举】
     * 默认、浮屏、分屏
     * 目前写死【默认】
     * </pre>
     *
     * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
     */
    private void setDisplayMode(com.akaxin.proto.core.PluginProto.PluginDisplayMode value) {
      if (value == null) {
        throw new NullPointerException();
      }

      displayMode_ = value.getNumber();
    }
    /**
     * <pre>
     * 展现方式【应该为一个枚举】
     * 默认、浮屏、分屏
     * 目前写死【默认】
     * </pre>
     *
     * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
     */
    private void clearDisplayMode() {

      displayMode_ = 0;
    }

    public static final int PERMISSION_STATUS_FIELD_NUMBER = 11;
    private int permissionStatus_;
    /**
     * <pre>
     * 可用状态
     * - 禁用
     * - 管理员可用
     * - 全员可用
     * </pre>
     *
     * <code>optional .core.PermissionStatus permission_status = 11;</code>
     */
    public int getPermissionStatusValue() {
      return permissionStatus_;
    }
    /**
     * <pre>
     * 可用状态
     * - 禁用
     * - 管理员可用
     * - 全员可用
     * </pre>
     *
     * <code>optional .core.PermissionStatus permission_status = 11;</code>
     */
    public com.akaxin.proto.core.PluginProto.PermissionStatus getPermissionStatus() {
      com.akaxin.proto.core.PluginProto.PermissionStatus result = com.akaxin.proto.core.PluginProto.PermissionStatus.forNumber(permissionStatus_);
      return result == null ? com.akaxin.proto.core.PluginProto.PermissionStatus.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * 可用状态
     * - 禁用
     * - 管理员可用
     * - 全员可用
     * </pre>
     *
     * <code>optional .core.PermissionStatus permission_status = 11;</code>
     */
    private void setPermissionStatusValue(int value) {
        permissionStatus_ = value;
    }
    /**
     * <pre>
     * 可用状态
     * - 禁用
     * - 管理员可用
     * - 全员可用
     * </pre>
     *
     * <code>optional .core.PermissionStatus permission_status = 11;</code>
     */
    private void setPermissionStatus(com.akaxin.proto.core.PluginProto.PermissionStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }

      permissionStatus_ = value.getNumber();
    }
    /**
     * <pre>
     * 可用状态
     * - 禁用
     * - 管理员可用
     * - 全员可用
     * </pre>
     *
     * <code>optional .core.PermissionStatus permission_status = 11;</code>
     */
    private void clearPermissionStatus() {

      permissionStatus_ = 0;
    }

    public static final int ENCRYPTED_SESSION_ID_BASE64_FIELD_NUMBER = 12;
    private String encryptedSessionIdBase64_;
    /**
     * <pre>
     * 使用auth_key加密的用户session
     * </pre>
     *
     * <code>optional string encrypted_session_id_base64 = 12;</code>
     */
    public String getEncryptedSessionIdBase64() {
      return encryptedSessionIdBase64_;
    }
    /**
     * <pre>
     * 使用auth_key加密的用户session
     * </pre>
     *
     * <code>optional string encrypted_session_id_base64 = 12;</code>
     */
    public com.google.protobuf.ByteString
        getEncryptedSessionIdBase64Bytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(encryptedSessionIdBase64_);
    }
    /**
     * <pre>
     * 使用auth_key加密的用户session
     * </pre>
     *
     * <code>optional string encrypted_session_id_base64 = 12;</code>
     */
    private void setEncryptedSessionIdBase64(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      encryptedSessionIdBase64_ = value;
    }
    /**
     * <pre>
     * 使用auth_key加密的用户session
     * </pre>
     *
     * <code>optional string encrypted_session_id_base64 = 12;</code>
     */
    private void clearEncryptedSessionIdBase64() {

      encryptedSessionIdBase64_ = getDefaultInstance().getEncryptedSessionIdBase64();
    }
    /**
     * <pre>
     * 使用auth_key加密的用户session
     * </pre>
     *
     * <code>optional string encrypted_session_id_base64 = 12;</code>
     */
    private void setEncryptedSessionIdBase64Bytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      encryptedSessionIdBase64_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!id_.isEmpty()) {
        output.writeString(1, getId());
      }
      if (!name_.isEmpty()) {
        output.writeString(2, getName());
      }
      if (!urlPage_.isEmpty()) {
        output.writeString(3, getUrlPage());
      }
      if (!apiUrl_.isEmpty()) {
        output.writeString(4, getApiUrl());
      }
      if (!icon_.isEmpty()) {
        output.writeString(5, getIcon());
      }
      if (!authKey_.isEmpty()) {
        output.writeString(6, getAuthKey());
      }
      if (!allowedIp_.isEmpty()) {
        output.writeString(7, getAllowedIp());
      }
      if (position_ != com.akaxin.proto.core.PluginProto.PluginPosition.HOME_PAGE.getNumber()) {
        output.writeEnum(8, position_);
      }
      if (order_ != 0) {
        output.writeInt32(9, order_);
      }
      if (displayMode_ != com.akaxin.proto.core.PluginProto.PluginDisplayMode.NEW_PAGE.getNumber()) {
        output.writeEnum(10, displayMode_);
      }
      if (permissionStatus_ != com.akaxin.proto.core.PluginProto.PermissionStatus.DISABLED.getNumber()) {
        output.writeEnum(11, permissionStatus_);
      }
      if (!encryptedSessionIdBase64_.isEmpty()) {
        output.writeString(12, getEncryptedSessionIdBase64());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!id_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getId());
      }
      if (!name_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      if (!urlPage_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getUrlPage());
      }
      if (!apiUrl_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getApiUrl());
      }
      if (!icon_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getIcon());
      }
      if (!authKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getAuthKey());
      }
      if (!allowedIp_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getAllowedIp());
      }
      if (position_ != com.akaxin.proto.core.PluginProto.PluginPosition.HOME_PAGE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, position_);
      }
      if (order_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, order_);
      }
      if (displayMode_ != com.akaxin.proto.core.PluginProto.PluginDisplayMode.NEW_PAGE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, displayMode_);
      }
      if (permissionStatus_ != com.akaxin.proto.core.PluginProto.PermissionStatus.DISABLED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, permissionStatus_);
      }
      if (!encryptedSessionIdBase64_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(12, getEncryptedSessionIdBase64());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.core.PluginProto.Plugin parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akaxin.proto.core.PluginProto.Plugin prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code core.Plugin}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          Plugin, Builder> implements
        // @@protoc_insertion_point(builder_implements:core.Plugin)
        com.akaxin.proto.core.PluginProto.PluginOrBuilder {
      // Construct using com.akaxin.proto.core.PluginProto.Plugin.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * 对于一个特定的Site，plugin.id 是唯一的。
       * </pre>
       *
       * <code>optional string id = 1;</code>
       */
      public String getId() {
        return instance.getId();
      }
      /**
       * <pre>
       * 对于一个特定的Site，plugin.id 是唯一的。
       * </pre>
       *
       * <code>optional string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        return instance.getIdBytes();
      }
      /**
       * <pre>
       * 对于一个特定的Site，plugin.id 是唯一的。
       * </pre>
       *
       * <code>optional string id = 1;</code>
       */
      public Builder setId(
          String value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <pre>
       * 对于一个特定的Site，plugin.id 是唯一的。
       * </pre>
       *
       * <code>optional string id = 1;</code>
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }
      /**
       * <pre>
       * 对于一个特定的Site，plugin.id 是唯一的。
       * </pre>
       *
       * <code>optional string id = 1;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * 扩展名字，会显示在界面上
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public String getName() {
        return instance.getName();
      }
      /**
       * <pre>
       * 扩展名字，会显示在界面上
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        return instance.getNameBytes();
      }
      /**
       * <pre>
       * 扩展名字，会显示在界面上
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public Builder setName(
          String value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <pre>
       * 扩展名字，会显示在界面上
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }
      /**
       * <pre>
       * 扩展名字，会显示在界面上
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * 落地页地址
       * 以http或https开头，客户端直接以url_page作为网址渲染webview
       * 否则，为api.proxy.page 请求的page参数值，默认为空
       * 如：
       * value= https://www.google.com 直接以此网址加载webview。
       * value= main，代表通过api.proxy.page接口请求main页面。
       * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
       * </pre>
       *
       * <code>optional string url_page = 3;</code>
       */
      public String getUrlPage() {
        return instance.getUrlPage();
      }
      /**
       * <pre>
       * 落地页地址
       * 以http或https开头，客户端直接以url_page作为网址渲染webview
       * 否则，为api.proxy.page 请求的page参数值，默认为空
       * 如：
       * value= https://www.google.com 直接以此网址加载webview。
       * value= main，代表通过api.proxy.page接口请求main页面。
       * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
       * </pre>
       *
       * <code>optional string url_page = 3;</code>
       */
      public com.google.protobuf.ByteString
          getUrlPageBytes() {
        return instance.getUrlPageBytes();
      }
      /**
       * <pre>
       * 落地页地址
       * 以http或https开头，客户端直接以url_page作为网址渲染webview
       * 否则，为api.proxy.page 请求的page参数值，默认为空
       * 如：
       * value= https://www.google.com 直接以此网址加载webview。
       * value= main，代表通过api.proxy.page接口请求main页面。
       * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
       * </pre>
       *
       * <code>optional string url_page = 3;</code>
       */
      public Builder setUrlPage(
          String value) {
        copyOnWrite();
        instance.setUrlPage(value);
        return this;
      }
      /**
       * <pre>
       * 落地页地址
       * 以http或https开头，客户端直接以url_page作为网址渲染webview
       * 否则，为api.proxy.page 请求的page参数值，默认为空
       * 如：
       * value= https://www.google.com 直接以此网址加载webview。
       * value= main，代表通过api.proxy.page接口请求main页面。
       * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
       * </pre>
       *
       * <code>optional string url_page = 3;</code>
       */
      public Builder clearUrlPage() {
        copyOnWrite();
        instance.clearUrlPage();
        return this;
      }
      /**
       * <pre>
       * 落地页地址
       * 以http或https开头，客户端直接以url_page作为网址渲染webview
       * 否则，为api.proxy.page 请求的page参数值，默认为空
       * 如：
       * value= https://www.google.com 直接以此网址加载webview。
       * value= main，代表通过api.proxy.page接口请求main页面。
       * value= 空，代表通过api.proxy.page接口请求空页面（pluginServer自己把空返回默认主页）
       * </pre>
       *
       * <code>optional string url_page = 3;</code>
       */
      public Builder setUrlPageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setUrlPageBytes(value);
        return this;
      }

      /**
       * <pre>
       * api.plugin.proxy 请求转发请求时的目的URL
       * 此URL只能以http或者https开头，如无则为http
       * ====IMPORTANT====
       * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
       * </pre>
       *
       * <code>optional string api_url = 4;</code>
       */
      public String getApiUrl() {
        return instance.getApiUrl();
      }
      /**
       * <pre>
       * api.plugin.proxy 请求转发请求时的目的URL
       * 此URL只能以http或者https开头，如无则为http
       * ====IMPORTANT====
       * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
       * </pre>
       *
       * <code>optional string api_url = 4;</code>
       */
      public com.google.protobuf.ByteString
          getApiUrlBytes() {
        return instance.getApiUrlBytes();
      }
      /**
       * <pre>
       * api.plugin.proxy 请求转发请求时的目的URL
       * 此URL只能以http或者https开头，如无则为http
       * ====IMPORTANT====
       * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
       * </pre>
       *
       * <code>optional string api_url = 4;</code>
       */
      public Builder setApiUrl(
          String value) {
        copyOnWrite();
        instance.setApiUrl(value);
        return this;
      }
      /**
       * <pre>
       * api.plugin.proxy 请求转发请求时的目的URL
       * 此URL只能以http或者https开头，如无则为http
       * ====IMPORTANT====
       * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
       * </pre>
       *
       * <code>optional string api_url = 4;</code>
       */
      public Builder clearApiUrl() {
        copyOnWrite();
        instance.clearApiUrl();
        return this;
      }
      /**
       * <pre>
       * api.plugin.proxy 请求转发请求时的目的URL
       * 此URL只能以http或者https开头，如无则为http
       * ====IMPORTANT====
       * 此api是给server用的，不允许传递此值到客户端。如复用此结构必须在传递给客户端之前将此值置空。
       * </pre>
       *
       * <code>optional string api_url = 4;</code>
       */
      public Builder setApiUrlBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setApiUrlBytes(value);
        return this;
      }

      /**
       * <pre>
       * 扩展图标文件，会显示在界面上
       * 如果以http开头，则代表着这是一个http协议的文件。
       * 否则，通过site-download功能下载此图片。
       * </pre>
       *
       * <code>optional string icon = 5;</code>
       */
      public String getIcon() {
        return instance.getIcon();
      }
      /**
       * <pre>
       * 扩展图标文件，会显示在界面上
       * 如果以http开头，则代表着这是一个http协议的文件。
       * 否则，通过site-download功能下载此图片。
       * </pre>
       *
       * <code>optional string icon = 5;</code>
       */
      public com.google.protobuf.ByteString
          getIconBytes() {
        return instance.getIconBytes();
      }
      /**
       * <pre>
       * 扩展图标文件，会显示在界面上
       * 如果以http开头，则代表着这是一个http协议的文件。
       * 否则，通过site-download功能下载此图片。
       * </pre>
       *
       * <code>optional string icon = 5;</code>
       */
      public Builder setIcon(
          String value) {
        copyOnWrite();
        instance.setIcon(value);
        return this;
      }
      /**
       * <pre>
       * 扩展图标文件，会显示在界面上
       * 如果以http开头，则代表着这是一个http协议的文件。
       * 否则，通过site-download功能下载此图片。
       * </pre>
       *
       * <code>optional string icon = 5;</code>
       */
      public Builder clearIcon() {
        copyOnWrite();
        instance.clearIcon();
        return this;
      }
      /**
       * <pre>
       * 扩展图标文件，会显示在界面上
       * 如果以http开头，则代表着这是一个http协议的文件。
       * 否则，通过site-download功能下载此图片。
       * </pre>
       *
       * <code>optional string icon = 5;</code>
       */
      public Builder setIconBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIconBytes(value);
        return this;
      }

      /**
       * <pre>
       * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
       * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
       * site 使用auth_key 加密发送给plugin的整个proto
       * 同时 site使用auth_key解析 plugin传递过来的具体proto值
       * </pre>
       *
       * <code>optional string auth_key = 6;</code>
       */
      public String getAuthKey() {
        return instance.getAuthKey();
      }
      /**
       * <pre>
       * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
       * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
       * site 使用auth_key 加密发送给plugin的整个proto
       * 同时 site使用auth_key解析 plugin传递过来的具体proto值
       * </pre>
       *
       * <code>optional string auth_key = 6;</code>
       */
      public com.google.protobuf.ByteString
          getAuthKeyBytes() {
        return instance.getAuthKeyBytes();
      }
      /**
       * <pre>
       * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
       * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
       * site 使用auth_key 加密发送给plugin的整个proto
       * 同时 site使用auth_key解析 plugin传递过来的具体proto值
       * </pre>
       *
       * <code>optional string auth_key = 6;</code>
       */
      public Builder setAuthKey(
          String value) {
        copyOnWrite();
        instance.setAuthKey(value);
        return this;
      }
      /**
       * <pre>
       * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
       * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
       * site 使用auth_key 加密发送给plugin的整个proto
       * 同时 site使用auth_key解析 plugin传递过来的具体proto值
       * </pre>
       *
       * <code>optional string auth_key = 6;</code>
       */
      public Builder clearAuthKey() {
        copyOnWrite();
        instance.clearAuthKey();
        return this;
      }
      /**
       * <pre>
       * pluginServer 在 请求 siteServer的innerAPI时，使用此值加密数据，以证明身份。
       * 添加扩展时由SiteServer自动生成并记录，为64个[A-Za-z0-9]组成的随机字符串。
       * site 使用auth_key 加密发送给plugin的整个proto
       * 同时 site使用auth_key解析 plugin传递过来的具体proto值
       * </pre>
       *
       * <code>optional string auth_key = 6;</code>
       */
      public Builder setAuthKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAuthKeyBytes(value);
        return this;
      }

      /**
       * <pre>
       * site server的innerAPI允许的pluginServer地址。
       * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
       * 如果有多个ip，以英文逗号[,]隔开。
       * </pre>
       *
       * <code>optional string allowed_ip = 7;</code>
       */
      public String getAllowedIp() {
        return instance.getAllowedIp();
      }
      /**
       * <pre>
       * site server的innerAPI允许的pluginServer地址。
       * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
       * 如果有多个ip，以英文逗号[,]隔开。
       * </pre>
       *
       * <code>optional string allowed_ip = 7;</code>
       */
      public com.google.protobuf.ByteString
          getAllowedIpBytes() {
        return instance.getAllowedIpBytes();
      }
      /**
       * <pre>
       * site server的innerAPI允许的pluginServer地址。
       * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
       * 如果有多个ip，以英文逗号[,]隔开。
       * </pre>
       *
       * <code>optional string allowed_ip = 7;</code>
       */
      public Builder setAllowedIp(
          String value) {
        copyOnWrite();
        instance.setAllowedIp(value);
        return this;
      }
      /**
       * <pre>
       * site server的innerAPI允许的pluginServer地址。
       * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
       * 如果有多个ip，以英文逗号[,]隔开。
       * </pre>
       *
       * <code>optional string allowed_ip = 7;</code>
       */
      public Builder clearAllowedIp() {
        copyOnWrite();
        instance.clearAllowedIp();
        return this;
      }
      /**
       * <pre>
       * site server的innerAPI允许的pluginServer地址。
       * 默认为127.0.0.1，如为空则代表不限制，此外：支持网络掩码的配置方式。
       * 如果有多个ip，以英文逗号[,]隔开。
       * </pre>
       *
       * <code>optional string allowed_ip = 7;</code>
       */
      public Builder setAllowedIpBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAllowedIpBytes(value);
        return this;
      }

      /**
       * <pre>
       * 扩展的位置【应该为一个枚举】
       * 值：首页、消息帧
       * 本次不允许首页并且消息帧这个类型。
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 8;</code>
       */
      public int getPositionValue() {
        return instance.getPositionValue();
      }
      /**
       * <pre>
       * 扩展的位置【应该为一个枚举】
       * 值：首页、消息帧
       * 本次不允许首页并且消息帧这个类型。
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 8;</code>
       */
      public Builder setPositionValue(int value) {
        copyOnWrite();
        instance.setPositionValue(value);
        return this;
      }
      /**
       * <pre>
       * 扩展的位置【应该为一个枚举】
       * 值：首页、消息帧
       * 本次不允许首页并且消息帧这个类型。
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 8;</code>
       */
      public com.akaxin.proto.core.PluginProto.PluginPosition getPosition() {
        return instance.getPosition();
      }
      /**
       * <pre>
       * 扩展的位置【应该为一个枚举】
       * 值：首页、消息帧
       * 本次不允许首页并且消息帧这个类型。
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 8;</code>
       */
      public Builder setPosition(com.akaxin.proto.core.PluginProto.PluginPosition value) {
        copyOnWrite();
        instance.setPosition(value);
        return this;
      }
      /**
       * <pre>
       * 扩展的位置【应该为一个枚举】
       * 值：首页、消息帧
       * 本次不允许首页并且消息帧这个类型。
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 8;</code>
       */
      public Builder clearPosition() {
        copyOnWrite();
        instance.clearPosition();
        return this;
      }

      /**
       * <pre>
       * 显示顺序
       * 当一个位置，有多个扩展时，此处描述顺序，数字越小，排列越靠前（从上往下，从左往右排列）
       * </pre>
       *
       * <code>optional int32 order = 9;</code>
       */
      public int getOrder() {
        return instance.getOrder();
      }
      /**
       * <pre>
       * 显示顺序
       * 当一个位置，有多个扩展时，此处描述顺序，数字越小，排列越靠前（从上往下，从左往右排列）
       * </pre>
       *
       * <code>optional int32 order = 9;</code>
       */
      public Builder setOrder(int value) {
        copyOnWrite();
        instance.setOrder(value);
        return this;
      }
      /**
       * <pre>
       * 显示顺序
       * 当一个位置，有多个扩展时，此处描述顺序，数字越小，排列越靠前（从上往下，从左往右排列）
       * </pre>
       *
       * <code>optional int32 order = 9;</code>
       */
      public Builder clearOrder() {
        copyOnWrite();
        instance.clearOrder();
        return this;
      }

      /**
       * <pre>
       * 展现方式【应该为一个枚举】
       * 默认、浮屏、分屏
       * 目前写死【默认】
       * </pre>
       *
       * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
       */
      public int getDisplayModeValue() {
        return instance.getDisplayModeValue();
      }
      /**
       * <pre>
       * 展现方式【应该为一个枚举】
       * 默认、浮屏、分屏
       * 目前写死【默认】
       * </pre>
       *
       * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
       */
      public Builder setDisplayModeValue(int value) {
        copyOnWrite();
        instance.setDisplayModeValue(value);
        return this;
      }
      /**
       * <pre>
       * 展现方式【应该为一个枚举】
       * 默认、浮屏、分屏
       * 目前写死【默认】
       * </pre>
       *
       * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
       */
      public com.akaxin.proto.core.PluginProto.PluginDisplayMode getDisplayMode() {
        return instance.getDisplayMode();
      }
      /**
       * <pre>
       * 展现方式【应该为一个枚举】
       * 默认、浮屏、分屏
       * 目前写死【默认】
       * </pre>
       *
       * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
       */
      public Builder setDisplayMode(com.akaxin.proto.core.PluginProto.PluginDisplayMode value) {
        copyOnWrite();
        instance.setDisplayMode(value);
        return this;
      }
      /**
       * <pre>
       * 展现方式【应该为一个枚举】
       * 默认、浮屏、分屏
       * 目前写死【默认】
       * </pre>
       *
       * <code>optional .core.PluginDisplayMode display_mode = 10;</code>
       */
      public Builder clearDisplayMode() {
        copyOnWrite();
        instance.clearDisplayMode();
        return this;
      }

      /**
       * <pre>
       * 可用状态
       * - 禁用
       * - 管理员可用
       * - 全员可用
       * </pre>
       *
       * <code>optional .core.PermissionStatus permission_status = 11;</code>
       */
      public int getPermissionStatusValue() {
        return instance.getPermissionStatusValue();
      }
      /**
       * <pre>
       * 可用状态
       * - 禁用
       * - 管理员可用
       * - 全员可用
       * </pre>
       *
       * <code>optional .core.PermissionStatus permission_status = 11;</code>
       */
      public Builder setPermissionStatusValue(int value) {
        copyOnWrite();
        instance.setPermissionStatusValue(value);
        return this;
      }
      /**
       * <pre>
       * 可用状态
       * - 禁用
       * - 管理员可用
       * - 全员可用
       * </pre>
       *
       * <code>optional .core.PermissionStatus permission_status = 11;</code>
       */
      public com.akaxin.proto.core.PluginProto.PermissionStatus getPermissionStatus() {
        return instance.getPermissionStatus();
      }
      /**
       * <pre>
       * 可用状态
       * - 禁用
       * - 管理员可用
       * - 全员可用
       * </pre>
       *
       * <code>optional .core.PermissionStatus permission_status = 11;</code>
       */
      public Builder setPermissionStatus(com.akaxin.proto.core.PluginProto.PermissionStatus value) {
        copyOnWrite();
        instance.setPermissionStatus(value);
        return this;
      }
      /**
       * <pre>
       * 可用状态
       * - 禁用
       * - 管理员可用
       * - 全员可用
       * </pre>
       *
       * <code>optional .core.PermissionStatus permission_status = 11;</code>
       */
      public Builder clearPermissionStatus() {
        copyOnWrite();
        instance.clearPermissionStatus();
        return this;
      }

      /**
       * <pre>
       * 使用auth_key加密的用户session
       * </pre>
       *
       * <code>optional string encrypted_session_id_base64 = 12;</code>
       */
      public String getEncryptedSessionIdBase64() {
        return instance.getEncryptedSessionIdBase64();
      }
      /**
       * <pre>
       * 使用auth_key加密的用户session
       * </pre>
       *
       * <code>optional string encrypted_session_id_base64 = 12;</code>
       */
      public com.google.protobuf.ByteString
          getEncryptedSessionIdBase64Bytes() {
        return instance.getEncryptedSessionIdBase64Bytes();
      }
      /**
       * <pre>
       * 使用auth_key加密的用户session
       * </pre>
       *
       * <code>optional string encrypted_session_id_base64 = 12;</code>
       */
      public Builder setEncryptedSessionIdBase64(
          String value) {
        copyOnWrite();
        instance.setEncryptedSessionIdBase64(value);
        return this;
      }
      /**
       * <pre>
       * 使用auth_key加密的用户session
       * </pre>
       *
       * <code>optional string encrypted_session_id_base64 = 12;</code>
       */
      public Builder clearEncryptedSessionIdBase64() {
        copyOnWrite();
        instance.clearEncryptedSessionIdBase64();
        return this;
      }
      /**
       * <pre>
       * 使用auth_key加密的用户session
       * </pre>
       *
       * <code>optional string encrypted_session_id_base64 = 12;</code>
       */
      public Builder setEncryptedSessionIdBase64Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setEncryptedSessionIdBase64Bytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:core.Plugin)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.akaxin.proto.core.PluginProto.Plugin();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.akaxin.proto.core.PluginProto.Plugin other = (com.akaxin.proto.core.PluginProto.Plugin) arg1;
          id_ = visitor.visitString(!id_.isEmpty(), id_,
              !other.id_.isEmpty(), other.id_);
          name_ = visitor.visitString(!name_.isEmpty(), name_,
              !other.name_.isEmpty(), other.name_);
          urlPage_ = visitor.visitString(!urlPage_.isEmpty(), urlPage_,
              !other.urlPage_.isEmpty(), other.urlPage_);
          apiUrl_ = visitor.visitString(!apiUrl_.isEmpty(), apiUrl_,
              !other.apiUrl_.isEmpty(), other.apiUrl_);
          icon_ = visitor.visitString(!icon_.isEmpty(), icon_,
              !other.icon_.isEmpty(), other.icon_);
          authKey_ = visitor.visitString(!authKey_.isEmpty(), authKey_,
              !other.authKey_.isEmpty(), other.authKey_);
          allowedIp_ = visitor.visitString(!allowedIp_.isEmpty(), allowedIp_,
              !other.allowedIp_.isEmpty(), other.allowedIp_);
          position_ = visitor.visitInt(position_ != 0, position_,    other.position_ != 0, other.position_);
          order_ = visitor.visitInt(order_ != 0, order_,
              other.order_ != 0, other.order_);
          displayMode_ = visitor.visitInt(displayMode_ != 0, displayMode_,    other.displayMode_ != 0, other.displayMode_);
          permissionStatus_ = visitor.visitInt(permissionStatus_ != 0, permissionStatus_,    other.permissionStatus_ != 0, other.permissionStatus_);
          encryptedSessionIdBase64_ = visitor.visitString(!encryptedSessionIdBase64_.isEmpty(), encryptedSessionIdBase64_,
              !other.encryptedSessionIdBase64_.isEmpty(), other.encryptedSessionIdBase64_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  id_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  name_ = s;
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  urlPage_ = s;
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  apiUrl_ = s;
                  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  icon_ = s;
                  break;
                }
                case 50: {
                  String s = input.readStringRequireUtf8();

                  authKey_ = s;
                  break;
                }
                case 58: {
                  String s = input.readStringRequireUtf8();

                  allowedIp_ = s;
                  break;
                }
                case 64: {
                  int rawValue = input.readEnum();

                  position_ = rawValue;
                  break;
                }
                case 72: {

                  order_ = input.readInt32();
                  break;
                }
                case 80: {
                  int rawValue = input.readEnum();

                  displayMode_ = rawValue;
                  break;
                }
                case 88: {
                  int rawValue = input.readEnum();

                  permissionStatus_ = rawValue;
                  break;
                }
                case 98: {
                  String s = input.readStringRequireUtf8();

                  encryptedSessionIdBase64_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.akaxin.proto.core.PluginProto.Plugin.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:core.Plugin)
    private static final com.akaxin.proto.core.PluginProto.Plugin DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Plugin();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.akaxin.proto.core.PluginProto.Plugin getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Plugin> PARSER;

    public static com.google.protobuf.Parser<Plugin> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
