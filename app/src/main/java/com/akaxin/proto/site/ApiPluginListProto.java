// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: site/api_plugin_list.proto

package com.akaxin.proto.site;

public final class ApiPluginListProto {
  private ApiPluginListProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ApiPluginListRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:site.ApiPluginListRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *分页：第几页
     * </pre>
     *
     * <code>optional int32 page_number = 1;</code>
     */
    int getPageNumber();

    /**
     * <pre>
     *分页：每页条数
     * </pre>
     *
     * <code>optional int32 page_size = 2;</code>
     */
    int getPageSize();

    /**
     * <pre>
     *查询扩展的状态
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 3;</code>
     */
    int getPositionValue();
    /**
     * <pre>
     *查询扩展的状态
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 3;</code>
     */
    com.akaxin.proto.core.PluginProto.PluginPosition getPosition();
  }
  /**
   * Protobuf type {@code site.ApiPluginListRequest}
   */
  public  static final class ApiPluginListRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ApiPluginListRequest, ApiPluginListRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:site.ApiPluginListRequest)
      ApiPluginListRequestOrBuilder {
    private ApiPluginListRequest() {
    }
    public static final int PAGE_NUMBER_FIELD_NUMBER = 1;
    private int pageNumber_;
    /**
     * <pre>
     *分页：第几页
     * </pre>
     *
     * <code>optional int32 page_number = 1;</code>
     */
    public int getPageNumber() {
      return pageNumber_;
    }
    /**
     * <pre>
     *分页：第几页
     * </pre>
     *
     * <code>optional int32 page_number = 1;</code>
     */
    private void setPageNumber(int value) {
      
      pageNumber_ = value;
    }
    /**
     * <pre>
     *分页：第几页
     * </pre>
     *
     * <code>optional int32 page_number = 1;</code>
     */
    private void clearPageNumber() {
      
      pageNumber_ = 0;
    }

    public static final int PAGE_SIZE_FIELD_NUMBER = 2;
    private int pageSize_;
    /**
     * <pre>
     *分页：每页条数
     * </pre>
     *
     * <code>optional int32 page_size = 2;</code>
     */
    public int getPageSize() {
      return pageSize_;
    }
    /**
     * <pre>
     *分页：每页条数
     * </pre>
     *
     * <code>optional int32 page_size = 2;</code>
     */
    private void setPageSize(int value) {
      
      pageSize_ = value;
    }
    /**
     * <pre>
     *分页：每页条数
     * </pre>
     *
     * <code>optional int32 page_size = 2;</code>
     */
    private void clearPageSize() {
      
      pageSize_ = 0;
    }

    public static final int POSITION_FIELD_NUMBER = 3;
    private int position_;
    /**
     * <pre>
     *查询扩展的状态
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 3;</code>
     */
    public int getPositionValue() {
      return position_;
    }
    /**
     * <pre>
     *查询扩展的状态
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 3;</code>
     */
    public com.akaxin.proto.core.PluginProto.PluginPosition getPosition() {
      com.akaxin.proto.core.PluginProto.PluginPosition result = com.akaxin.proto.core.PluginProto.PluginPosition.forNumber(position_);
      return result == null ? com.akaxin.proto.core.PluginProto.PluginPosition.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *查询扩展的状态
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 3;</code>
     */
    private void setPositionValue(int value) {
        position_ = value;
    }
    /**
     * <pre>
     *查询扩展的状态
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 3;</code>
     */
    private void setPosition(com.akaxin.proto.core.PluginProto.PluginPosition value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      position_ = value.getNumber();
    }
    /**
     * <pre>
     *查询扩展的状态
     * </pre>
     *
     * <code>optional .core.PluginPosition position = 3;</code>
     */
    private void clearPosition() {
      
      position_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (pageNumber_ != 0) {
        output.writeInt32(1, pageNumber_);
      }
      if (pageSize_ != 0) {
        output.writeInt32(2, pageSize_);
      }
      if (position_ != com.akaxin.proto.core.PluginProto.PluginPosition.HOME_PAGE.getNumber()) {
        output.writeEnum(3, position_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (pageNumber_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, pageNumber_);
      }
      if (pageSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, pageSize_);
      }
      if (position_ != com.akaxin.proto.core.PluginProto.PluginPosition.HOME_PAGE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, position_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code site.ApiPluginListRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          ApiPluginListRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:site.ApiPluginListRequest)
        com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequestOrBuilder {
      // Construct using com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *分页：第几页
       * </pre>
       *
       * <code>optional int32 page_number = 1;</code>
       */
      public int getPageNumber() {
        return instance.getPageNumber();
      }
      /**
       * <pre>
       *分页：第几页
       * </pre>
       *
       * <code>optional int32 page_number = 1;</code>
       */
      public Builder setPageNumber(int value) {
        copyOnWrite();
        instance.setPageNumber(value);
        return this;
      }
      /**
       * <pre>
       *分页：第几页
       * </pre>
       *
       * <code>optional int32 page_number = 1;</code>
       */
      public Builder clearPageNumber() {
        copyOnWrite();
        instance.clearPageNumber();
        return this;
      }

      /**
       * <pre>
       *分页：每页条数
       * </pre>
       *
       * <code>optional int32 page_size = 2;</code>
       */
      public int getPageSize() {
        return instance.getPageSize();
      }
      /**
       * <pre>
       *分页：每页条数
       * </pre>
       *
       * <code>optional int32 page_size = 2;</code>
       */
      public Builder setPageSize(int value) {
        copyOnWrite();
        instance.setPageSize(value);
        return this;
      }
      /**
       * <pre>
       *分页：每页条数
       * </pre>
       *
       * <code>optional int32 page_size = 2;</code>
       */
      public Builder clearPageSize() {
        copyOnWrite();
        instance.clearPageSize();
        return this;
      }

      /**
       * <pre>
       *查询扩展的状态
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 3;</code>
       */
      public int getPositionValue() {
        return instance.getPositionValue();
      }
      /**
       * <pre>
       *查询扩展的状态
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 3;</code>
       */
      public Builder setPositionValue(int value) {
        copyOnWrite();
        instance.setPositionValue(value);
        return this;
      }
      /**
       * <pre>
       *查询扩展的状态
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 3;</code>
       */
      public com.akaxin.proto.core.PluginProto.PluginPosition getPosition() {
        return instance.getPosition();
      }
      /**
       * <pre>
       *查询扩展的状态
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 3;</code>
       */
      public Builder setPosition(com.akaxin.proto.core.PluginProto.PluginPosition value) {
        copyOnWrite();
        instance.setPosition(value);
        return this;
      }
      /**
       * <pre>
       *查询扩展的状态
       * </pre>
       *
       * <code>optional .core.PluginPosition position = 3;</code>
       */
      public Builder clearPosition() {
        copyOnWrite();
        instance.clearPosition();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:site.ApiPluginListRequest)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest other = (com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest) arg1;
          pageNumber_ = visitor.visitInt(pageNumber_ != 0, pageNumber_,
              other.pageNumber_ != 0, other.pageNumber_);
          pageSize_ = visitor.visitInt(pageSize_ != 0, pageSize_,
              other.pageSize_ != 0, other.pageSize_);
          position_ = visitor.visitInt(position_ != 0, position_,    other.position_ != 0, other.position_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  pageNumber_ = input.readInt32();
                  break;
                }
                case 16: {

                  pageSize_ = input.readInt32();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();

                  position_ = rawValue;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:site.ApiPluginListRequest)
    private static final com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ApiPluginListRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ApiPluginListRequest> PARSER;

    public static com.google.protobuf.Parser<ApiPluginListRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ApiPluginListResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:site.ApiPluginListResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    java.util.List<com.akaxin.proto.core.PluginProto.Plugin>
        getPluginList();
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    com.akaxin.proto.core.PluginProto.Plugin getPlugin(int index);
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    int getPluginCount();
  }
  /**
   * Protobuf type {@code site.ApiPluginListResponse}
   */
  public  static final class ApiPluginListResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ApiPluginListResponse, ApiPluginListResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:site.ApiPluginListResponse)
      ApiPluginListResponseOrBuilder {
    private ApiPluginListResponse() {
      plugin_ = emptyProtobufList();
    }
    public static final int PLUGIN_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.akaxin.proto.core.PluginProto.Plugin> plugin_;
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    public java.util.List<com.akaxin.proto.core.PluginProto.Plugin> getPluginList() {
      return plugin_;
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    public java.util.List<? extends com.akaxin.proto.core.PluginProto.PluginOrBuilder>
        getPluginOrBuilderList() {
      return plugin_;
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    public int getPluginCount() {
      return plugin_.size();
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    public com.akaxin.proto.core.PluginProto.Plugin getPlugin(int index) {
      return plugin_.get(index);
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    public com.akaxin.proto.core.PluginProto.PluginOrBuilder getPluginOrBuilder(
        int index) {
      return plugin_.get(index);
    }
    private void ensurePluginIsMutable() {
      if (!plugin_.isModifiable()) {
        plugin_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(plugin_);
       }
    }

    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void setPlugin(
        int index, com.akaxin.proto.core.PluginProto.Plugin value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePluginIsMutable();
      plugin_.set(index, value);
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void setPlugin(
        int index, com.akaxin.proto.core.PluginProto.Plugin.Builder builderForValue) {
      ensurePluginIsMutable();
      plugin_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void addPlugin(com.akaxin.proto.core.PluginProto.Plugin value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePluginIsMutable();
      plugin_.add(value);
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void addPlugin(
        int index, com.akaxin.proto.core.PluginProto.Plugin value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePluginIsMutable();
      plugin_.add(index, value);
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void addPlugin(
        com.akaxin.proto.core.PluginProto.Plugin.Builder builderForValue) {
      ensurePluginIsMutable();
      plugin_.add(builderForValue.build());
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void addPlugin(
        int index, com.akaxin.proto.core.PluginProto.Plugin.Builder builderForValue) {
      ensurePluginIsMutable();
      plugin_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void addAllPlugin(
        Iterable<? extends com.akaxin.proto.core.PluginProto.Plugin> values) {
      ensurePluginIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, plugin_);
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void clearPlugin() {
      plugin_ = emptyProtobufList();
    }
    /**
     * <pre>
     *获取插件列表数据
     * </pre>
     *
     * <code>repeated .core.Plugin plugin = 1;</code>
     */
    private void removePlugin(int index) {
      ensurePluginIsMutable();
      plugin_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < plugin_.size(); i++) {
        output.writeMessage(1, plugin_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < plugin_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, plugin_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code site.ApiPluginListResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          ApiPluginListResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:site.ApiPluginListResponse)
        com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponseOrBuilder {
      // Construct using com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public java.util.List<com.akaxin.proto.core.PluginProto.Plugin> getPluginList() {
        return java.util.Collections.unmodifiableList(
            instance.getPluginList());
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public int getPluginCount() {
        return instance.getPluginCount();
      }/**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public com.akaxin.proto.core.PluginProto.Plugin getPlugin(int index) {
        return instance.getPlugin(index);
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder setPlugin(
          int index, com.akaxin.proto.core.PluginProto.Plugin value) {
        copyOnWrite();
        instance.setPlugin(index, value);
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder setPlugin(
          int index, com.akaxin.proto.core.PluginProto.Plugin.Builder builderForValue) {
        copyOnWrite();
        instance.setPlugin(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder addPlugin(com.akaxin.proto.core.PluginProto.Plugin value) {
        copyOnWrite();
        instance.addPlugin(value);
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder addPlugin(
          int index, com.akaxin.proto.core.PluginProto.Plugin value) {
        copyOnWrite();
        instance.addPlugin(index, value);
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder addPlugin(
          com.akaxin.proto.core.PluginProto.Plugin.Builder builderForValue) {
        copyOnWrite();
        instance.addPlugin(builderForValue);
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder addPlugin(
          int index, com.akaxin.proto.core.PluginProto.Plugin.Builder builderForValue) {
        copyOnWrite();
        instance.addPlugin(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder addAllPlugin(
          Iterable<? extends com.akaxin.proto.core.PluginProto.Plugin> values) {
        copyOnWrite();
        instance.addAllPlugin(values);
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder clearPlugin() {
        copyOnWrite();
        instance.clearPlugin();
        return this;
      }
      /**
       * <pre>
       *获取插件列表数据
       * </pre>
       *
       * <code>repeated .core.Plugin plugin = 1;</code>
       */
      public Builder removePlugin(int index) {
        copyOnWrite();
        instance.removePlugin(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:site.ApiPluginListResponse)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          plugin_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse other = (com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse) arg1;
          plugin_= visitor.visitList(plugin_, other.plugin_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!plugin_.isModifiable()) {
                    plugin_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(plugin_);
                  }
                  plugin_.add(
                      input.readMessage(com.akaxin.proto.core.PluginProto.Plugin.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:site.ApiPluginListResponse)
    private static final com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ApiPluginListResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.akaxin.proto.site.ApiPluginListProto.ApiPluginListResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ApiPluginListResponse> PARSER;

    public static com.google.protobuf.Parser<ApiPluginListResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
