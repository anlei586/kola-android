// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: site/im_cts_message.proto

package com.akaxin.proto.site;

public final class ImCtsMessageProto {
  private ImCtsMessageProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ImCtsMessageRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:site.ImCtsMessageRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *消息类型
     * </pre>
     *
     * <code>optional .core.MsgType type = 1;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     *消息类型
     * </pre>
     *
     * <code>optional .core.MsgType type = 1;</code>
     */
    com.akaxin.proto.core.CoreProto.MsgType getType();

    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    boolean hasText();
    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    com.akaxin.proto.core.CoreProto.MsgText getText();

    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    boolean hasSecretText();
    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    com.akaxin.proto.core.CoreProto.MsgSecretText getSecretText();

    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    boolean hasGroupText();
    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupText getGroupText();

    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    boolean hasGroupSecretText();
    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupSecretText getGroupSecretText();

    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    boolean hasImage();
    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    com.akaxin.proto.core.CoreProto.MsgImage getImage();

    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    boolean hasSecretImage();
    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    com.akaxin.proto.core.CoreProto.MsgSecretImage getSecretImage();

    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    boolean hasGroupImage();
    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupImage getGroupImage();

    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    boolean hasGroupSecretImage();
    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupSecretImage getGroupSecretImage();

    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    boolean hasVoice();
    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    com.akaxin.proto.core.CoreProto.MsgVoice getVoice();

    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    boolean hasSecretVoice();
    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    com.akaxin.proto.core.CoreProto.MsgSecretVoice getSecretVoice();

    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    boolean hasGroupVoice();
    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupVoice getGroupVoice();

    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    boolean hasGroupSecretVoice();
    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupSecretVoice getGroupSecretVoice();

    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    boolean hasU2Map();
    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    com.akaxin.proto.core.CoreProto.U2Map getU2Map();

    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    boolean hasU2SecretMap();
    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    com.akaxin.proto.core.CoreProto.U2SecretMap getU2SecretMap();

    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    boolean hasGroupMap();
    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupMap getGroupMap();

    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    boolean hasGroupSecretMap();
    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupSecretMap getGroupSecretMap();

    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    boolean hasU2MsgNotice();
    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    com.akaxin.proto.core.CoreProto.U2MsgNotice getU2MsgNotice();

    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    boolean hasGroupMsgNotice();
    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupMsgNotice getGroupMsgNotice();

    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    boolean hasU2Recall();
    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    com.akaxin.proto.core.CoreProto.U2Recall getU2Recall();

    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    boolean hasGroupRecall();
    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupRecall getGroupRecall();

    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    boolean hasU2Web();
    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    com.akaxin.proto.core.CoreProto.U2Web getU2Web();

    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    boolean hasGroupWeb();
    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupWeb getGroupWeb();

    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    boolean hasU2WebNotice();
    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    com.akaxin.proto.core.CoreProto.U2WebNotice getU2WebNotice();

    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    boolean hasGroupWebNotice();
    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    com.akaxin.proto.core.CoreProto.GroupWebNotice getGroupWebNotice();
  }
  /**
   * Protobuf type {@code site.ImCtsMessageRequest}
   */
  public  static final class ImCtsMessageRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ImCtsMessageRequest, ImCtsMessageRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:site.ImCtsMessageRequest)
      ImCtsMessageRequestOrBuilder {
    private ImCtsMessageRequest() {
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     *消息类型
     * </pre>
     *
     * <code>optional .core.MsgType type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     *消息类型
     * </pre>
     *
     * <code>optional .core.MsgType type = 1;</code>
     */
    public com.akaxin.proto.core.CoreProto.MsgType getType() {
      com.akaxin.proto.core.CoreProto.MsgType result = com.akaxin.proto.core.CoreProto.MsgType.forNumber(type_);
      return result == null ? com.akaxin.proto.core.CoreProto.MsgType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *消息类型
     * </pre>
     *
     * <code>optional .core.MsgType type = 1;</code>
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <pre>
     *消息类型
     * </pre>
     *
     * <code>optional .core.MsgType type = 1;</code>
     */
    private void setType(com.akaxin.proto.core.CoreProto.MsgType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
    }
    /**
     * <pre>
     *消息类型
     * </pre>
     *
     * <code>optional .core.MsgType type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    private com.akaxin.proto.core.CoreProto.MsgText text_;
    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    public boolean hasText() {
      return text_ != null;
    }
    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    public com.akaxin.proto.core.CoreProto.MsgText getText() {
      return text_ == null ? com.akaxin.proto.core.CoreProto.MsgText.getDefaultInstance() : text_;
    }
    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    private void setText(com.akaxin.proto.core.CoreProto.MsgText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      text_ = value;
      
      }
    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    private void setText(
        com.akaxin.proto.core.CoreProto.MsgText.Builder builderForValue) {
      text_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    private void mergeText(com.akaxin.proto.core.CoreProto.MsgText value) {
      if (text_ != null &&
          text_ != com.akaxin.proto.core.CoreProto.MsgText.getDefaultInstance()) {
        text_ =
          com.akaxin.proto.core.CoreProto.MsgText.newBuilder(text_).mergeFrom(value).buildPartial();
      } else {
        text_ = value;
      }
      
    }
    /**
     * <pre>
     *二人文本消息
     * </pre>
     *
     * <code>optional .core.MsgText text = 2;</code>
     */
    private void clearText() {  text_ = null;
      
    }

    public static final int SECRETTEXT_FIELD_NUMBER = 3;
    private com.akaxin.proto.core.CoreProto.MsgSecretText secretText_;
    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    public boolean hasSecretText() {
      return secretText_ != null;
    }
    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    public com.akaxin.proto.core.CoreProto.MsgSecretText getSecretText() {
      return secretText_ == null ? com.akaxin.proto.core.CoreProto.MsgSecretText.getDefaultInstance() : secretText_;
    }
    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    private void setSecretText(com.akaxin.proto.core.CoreProto.MsgSecretText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      secretText_ = value;
      
      }
    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    private void setSecretText(
        com.akaxin.proto.core.CoreProto.MsgSecretText.Builder builderForValue) {
      secretText_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    private void mergeSecretText(com.akaxin.proto.core.CoreProto.MsgSecretText value) {
      if (secretText_ != null &&
          secretText_ != com.akaxin.proto.core.CoreProto.MsgSecretText.getDefaultInstance()) {
        secretText_ =
          com.akaxin.proto.core.CoreProto.MsgSecretText.newBuilder(secretText_).mergeFrom(value).buildPartial();
      } else {
        secretText_ = value;
      }
      
    }
    /**
     * <pre>
     *二人加密文本消息
     * </pre>
     *
     * <code>optional .core.MsgSecretText secretText = 3;</code>
     */
    private void clearSecretText() {  secretText_ = null;
      
    }

    public static final int GROUPTEXT_FIELD_NUMBER = 4;
    private com.akaxin.proto.core.CoreProto.GroupText groupText_;
    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    public boolean hasGroupText() {
      return groupText_ != null;
    }
    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupText getGroupText() {
      return groupText_ == null ? com.akaxin.proto.core.CoreProto.GroupText.getDefaultInstance() : groupText_;
    }
    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    private void setGroupText(com.akaxin.proto.core.CoreProto.GroupText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupText_ = value;
      
      }
    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    private void setGroupText(
        com.akaxin.proto.core.CoreProto.GroupText.Builder builderForValue) {
      groupText_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    private void mergeGroupText(com.akaxin.proto.core.CoreProto.GroupText value) {
      if (groupText_ != null &&
          groupText_ != com.akaxin.proto.core.CoreProto.GroupText.getDefaultInstance()) {
        groupText_ =
          com.akaxin.proto.core.CoreProto.GroupText.newBuilder(groupText_).mergeFrom(value).buildPartial();
      } else {
        groupText_ = value;
      }
      
    }
    /**
     * <pre>
     *群文本消息
     * </pre>
     *
     * <code>optional .core.GroupText groupText = 4;</code>
     */
    private void clearGroupText() {  groupText_ = null;
      
    }

    public static final int GROUPSECRETTEXT_FIELD_NUMBER = 5;
    private com.akaxin.proto.core.CoreProto.GroupSecretText groupSecretText_;
    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    public boolean hasGroupSecretText() {
      return groupSecretText_ != null;
    }
    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupSecretText getGroupSecretText() {
      return groupSecretText_ == null ? com.akaxin.proto.core.CoreProto.GroupSecretText.getDefaultInstance() : groupSecretText_;
    }
    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    private void setGroupSecretText(com.akaxin.proto.core.CoreProto.GroupSecretText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupSecretText_ = value;
      
      }
    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    private void setGroupSecretText(
        com.akaxin.proto.core.CoreProto.GroupSecretText.Builder builderForValue) {
      groupSecretText_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    private void mergeGroupSecretText(com.akaxin.proto.core.CoreProto.GroupSecretText value) {
      if (groupSecretText_ != null &&
          groupSecretText_ != com.akaxin.proto.core.CoreProto.GroupSecretText.getDefaultInstance()) {
        groupSecretText_ =
          com.akaxin.proto.core.CoreProto.GroupSecretText.newBuilder(groupSecretText_).mergeFrom(value).buildPartial();
      } else {
        groupSecretText_ = value;
      }
      
    }
    /**
     * <pre>
     *群加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
     */
    private void clearGroupSecretText() {  groupSecretText_ = null;
      
    }

    public static final int IMAGE_FIELD_NUMBER = 6;
    private com.akaxin.proto.core.CoreProto.MsgImage image_;
    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    public boolean hasImage() {
      return image_ != null;
    }
    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    public com.akaxin.proto.core.CoreProto.MsgImage getImage() {
      return image_ == null ? com.akaxin.proto.core.CoreProto.MsgImage.getDefaultInstance() : image_;
    }
    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    private void setImage(com.akaxin.proto.core.CoreProto.MsgImage value) {
      if (value == null) {
        throw new NullPointerException();
      }
      image_ = value;
      
      }
    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    private void setImage(
        com.akaxin.proto.core.CoreProto.MsgImage.Builder builderForValue) {
      image_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    private void mergeImage(com.akaxin.proto.core.CoreProto.MsgImage value) {
      if (image_ != null &&
          image_ != com.akaxin.proto.core.CoreProto.MsgImage.getDefaultInstance()) {
        image_ =
          com.akaxin.proto.core.CoreProto.MsgImage.newBuilder(image_).mergeFrom(value).buildPartial();
      } else {
        image_ = value;
      }
      
    }
    /**
     * <pre>
     *二人图片消息
     * </pre>
     *
     * <code>optional .core.MsgImage image = 6;</code>
     */
    private void clearImage() {  image_ = null;
      
    }

    public static final int SECRETIMAGE_FIELD_NUMBER = 7;
    private com.akaxin.proto.core.CoreProto.MsgSecretImage secretImage_;
    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    public boolean hasSecretImage() {
      return secretImage_ != null;
    }
    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    public com.akaxin.proto.core.CoreProto.MsgSecretImage getSecretImage() {
      return secretImage_ == null ? com.akaxin.proto.core.CoreProto.MsgSecretImage.getDefaultInstance() : secretImage_;
    }
    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    private void setSecretImage(com.akaxin.proto.core.CoreProto.MsgSecretImage value) {
      if (value == null) {
        throw new NullPointerException();
      }
      secretImage_ = value;
      
      }
    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    private void setSecretImage(
        com.akaxin.proto.core.CoreProto.MsgSecretImage.Builder builderForValue) {
      secretImage_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    private void mergeSecretImage(com.akaxin.proto.core.CoreProto.MsgSecretImage value) {
      if (secretImage_ != null &&
          secretImage_ != com.akaxin.proto.core.CoreProto.MsgSecretImage.getDefaultInstance()) {
        secretImage_ =
          com.akaxin.proto.core.CoreProto.MsgSecretImage.newBuilder(secretImage_).mergeFrom(value).buildPartial();
      } else {
        secretImage_ = value;
      }
      
    }
    /**
     * <pre>
     *二人加密图片消息
     * </pre>
     *
     * <code>optional .core.MsgSecretImage secretImage = 7;</code>
     */
    private void clearSecretImage() {  secretImage_ = null;
      
    }

    public static final int GROUPIMAGE_FIELD_NUMBER = 8;
    private com.akaxin.proto.core.CoreProto.GroupImage groupImage_;
    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    public boolean hasGroupImage() {
      return groupImage_ != null;
    }
    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupImage getGroupImage() {
      return groupImage_ == null ? com.akaxin.proto.core.CoreProto.GroupImage.getDefaultInstance() : groupImage_;
    }
    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    private void setGroupImage(com.akaxin.proto.core.CoreProto.GroupImage value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupImage_ = value;
      
      }
    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    private void setGroupImage(
        com.akaxin.proto.core.CoreProto.GroupImage.Builder builderForValue) {
      groupImage_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    private void mergeGroupImage(com.akaxin.proto.core.CoreProto.GroupImage value) {
      if (groupImage_ != null &&
          groupImage_ != com.akaxin.proto.core.CoreProto.GroupImage.getDefaultInstance()) {
        groupImage_ =
          com.akaxin.proto.core.CoreProto.GroupImage.newBuilder(groupImage_).mergeFrom(value).buildPartial();
      } else {
        groupImage_ = value;
      }
      
    }
    /**
     * <pre>
     *群图片消息
     * </pre>
     *
     * <code>optional .core.GroupImage groupImage = 8;</code>
     */
    private void clearGroupImage() {  groupImage_ = null;
      
    }

    public static final int GROUPSECRETIMAGE_FIELD_NUMBER = 9;
    private com.akaxin.proto.core.CoreProto.GroupSecretImage groupSecretImage_;
    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    public boolean hasGroupSecretImage() {
      return groupSecretImage_ != null;
    }
    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupSecretImage getGroupSecretImage() {
      return groupSecretImage_ == null ? com.akaxin.proto.core.CoreProto.GroupSecretImage.getDefaultInstance() : groupSecretImage_;
    }
    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    private void setGroupSecretImage(com.akaxin.proto.core.CoreProto.GroupSecretImage value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupSecretImage_ = value;
      
      }
    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    private void setGroupSecretImage(
        com.akaxin.proto.core.CoreProto.GroupSecretImage.Builder builderForValue) {
      groupSecretImage_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    private void mergeGroupSecretImage(com.akaxin.proto.core.CoreProto.GroupSecretImage value) {
      if (groupSecretImage_ != null &&
          groupSecretImage_ != com.akaxin.proto.core.CoreProto.GroupSecretImage.getDefaultInstance()) {
        groupSecretImage_ =
          com.akaxin.proto.core.CoreProto.GroupSecretImage.newBuilder(groupSecretImage_).mergeFrom(value).buildPartial();
      } else {
        groupSecretImage_ = value;
      }
      
    }
    /**
     * <pre>
     *群图片加密消息
     * </pre>
     *
     * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
     */
    private void clearGroupSecretImage() {  groupSecretImage_ = null;
      
    }

    public static final int VOICE_FIELD_NUMBER = 10;
    private com.akaxin.proto.core.CoreProto.MsgVoice voice_;
    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    public boolean hasVoice() {
      return voice_ != null;
    }
    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    public com.akaxin.proto.core.CoreProto.MsgVoice getVoice() {
      return voice_ == null ? com.akaxin.proto.core.CoreProto.MsgVoice.getDefaultInstance() : voice_;
    }
    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    private void setVoice(com.akaxin.proto.core.CoreProto.MsgVoice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      voice_ = value;
      
      }
    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    private void setVoice(
        com.akaxin.proto.core.CoreProto.MsgVoice.Builder builderForValue) {
      voice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    private void mergeVoice(com.akaxin.proto.core.CoreProto.MsgVoice value) {
      if (voice_ != null &&
          voice_ != com.akaxin.proto.core.CoreProto.MsgVoice.getDefaultInstance()) {
        voice_ =
          com.akaxin.proto.core.CoreProto.MsgVoice.newBuilder(voice_).mergeFrom(value).buildPartial();
      } else {
        voice_ = value;
      }
      
    }
    /**
     * <pre>
     *二人语音
     * </pre>
     *
     * <code>optional .core.MsgVoice voice = 10;</code>
     */
    private void clearVoice() {  voice_ = null;
      
    }

    public static final int SECRETVOICE_FIELD_NUMBER = 11;
    private com.akaxin.proto.core.CoreProto.MsgSecretVoice secretVoice_;
    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    public boolean hasSecretVoice() {
      return secretVoice_ != null;
    }
    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    public com.akaxin.proto.core.CoreProto.MsgSecretVoice getSecretVoice() {
      return secretVoice_ == null ? com.akaxin.proto.core.CoreProto.MsgSecretVoice.getDefaultInstance() : secretVoice_;
    }
    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    private void setSecretVoice(com.akaxin.proto.core.CoreProto.MsgSecretVoice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      secretVoice_ = value;
      
      }
    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    private void setSecretVoice(
        com.akaxin.proto.core.CoreProto.MsgSecretVoice.Builder builderForValue) {
      secretVoice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    private void mergeSecretVoice(com.akaxin.proto.core.CoreProto.MsgSecretVoice value) {
      if (secretVoice_ != null &&
          secretVoice_ != com.akaxin.proto.core.CoreProto.MsgSecretVoice.getDefaultInstance()) {
        secretVoice_ =
          com.akaxin.proto.core.CoreProto.MsgSecretVoice.newBuilder(secretVoice_).mergeFrom(value).buildPartial();
      } else {
        secretVoice_ = value;
      }
      
    }
    /**
     * <pre>
     *二人加密语音
     * </pre>
     *
     * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
     */
    private void clearSecretVoice() {  secretVoice_ = null;
      
    }

    public static final int GROUPVOICE_FIELD_NUMBER = 12;
    private com.akaxin.proto.core.CoreProto.GroupVoice groupVoice_;
    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    public boolean hasGroupVoice() {
      return groupVoice_ != null;
    }
    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupVoice getGroupVoice() {
      return groupVoice_ == null ? com.akaxin.proto.core.CoreProto.GroupVoice.getDefaultInstance() : groupVoice_;
    }
    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    private void setGroupVoice(com.akaxin.proto.core.CoreProto.GroupVoice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupVoice_ = value;
      
      }
    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    private void setGroupVoice(
        com.akaxin.proto.core.CoreProto.GroupVoice.Builder builderForValue) {
      groupVoice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    private void mergeGroupVoice(com.akaxin.proto.core.CoreProto.GroupVoice value) {
      if (groupVoice_ != null &&
          groupVoice_ != com.akaxin.proto.core.CoreProto.GroupVoice.getDefaultInstance()) {
        groupVoice_ =
          com.akaxin.proto.core.CoreProto.GroupVoice.newBuilder(groupVoice_).mergeFrom(value).buildPartial();
      } else {
        groupVoice_ = value;
      }
      
    }
    /**
     * <pre>
     *群语音
     * </pre>
     *
     * <code>optional .core.GroupVoice groupVoice = 12;</code>
     */
    private void clearGroupVoice() {  groupVoice_ = null;
      
    }

    public static final int GROUPSECRETVOICE_FIELD_NUMBER = 13;
    private com.akaxin.proto.core.CoreProto.GroupSecretVoice groupSecretVoice_;
    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    public boolean hasGroupSecretVoice() {
      return groupSecretVoice_ != null;
    }
    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupSecretVoice getGroupSecretVoice() {
      return groupSecretVoice_ == null ? com.akaxin.proto.core.CoreProto.GroupSecretVoice.getDefaultInstance() : groupSecretVoice_;
    }
    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    private void setGroupSecretVoice(com.akaxin.proto.core.CoreProto.GroupSecretVoice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupSecretVoice_ = value;
      
      }
    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    private void setGroupSecretVoice(
        com.akaxin.proto.core.CoreProto.GroupSecretVoice.Builder builderForValue) {
      groupSecretVoice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    private void mergeGroupSecretVoice(com.akaxin.proto.core.CoreProto.GroupSecretVoice value) {
      if (groupSecretVoice_ != null &&
          groupSecretVoice_ != com.akaxin.proto.core.CoreProto.GroupSecretVoice.getDefaultInstance()) {
        groupSecretVoice_ =
          com.akaxin.proto.core.CoreProto.GroupSecretVoice.newBuilder(groupSecretVoice_).mergeFrom(value).buildPartial();
      } else {
        groupSecretVoice_ = value;
      }
      
    }
    /**
     * <pre>
     *群加密语音
     * </pre>
     *
     * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
     */
    private void clearGroupSecretVoice() {  groupSecretVoice_ = null;
      
    }

    public static final int U2MAP_FIELD_NUMBER = 14;
    private com.akaxin.proto.core.CoreProto.U2Map u2Map_;
    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    public boolean hasU2Map() {
      return u2Map_ != null;
    }
    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    public com.akaxin.proto.core.CoreProto.U2Map getU2Map() {
      return u2Map_ == null ? com.akaxin.proto.core.CoreProto.U2Map.getDefaultInstance() : u2Map_;
    }
    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    private void setU2Map(com.akaxin.proto.core.CoreProto.U2Map value) {
      if (value == null) {
        throw new NullPointerException();
      }
      u2Map_ = value;
      
      }
    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    private void setU2Map(
        com.akaxin.proto.core.CoreProto.U2Map.Builder builderForValue) {
      u2Map_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    private void mergeU2Map(com.akaxin.proto.core.CoreProto.U2Map value) {
      if (u2Map_ != null &&
          u2Map_ != com.akaxin.proto.core.CoreProto.U2Map.getDefaultInstance()) {
        u2Map_ =
          com.akaxin.proto.core.CoreProto.U2Map.newBuilder(u2Map_).mergeFrom(value).buildPartial();
      } else {
        u2Map_ = value;
      }
      
    }
    /**
     * <pre>
     *v0.4.3 版本未使用
     * </pre>
     *
     * <code>optional .core.U2Map u2Map = 14;</code>
     */
    private void clearU2Map() {  u2Map_ = null;
      
    }

    public static final int U2SECRETMAP_FIELD_NUMBER = 15;
    private com.akaxin.proto.core.CoreProto.U2SecretMap u2SecretMap_;
    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    public boolean hasU2SecretMap() {
      return u2SecretMap_ != null;
    }
    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    public com.akaxin.proto.core.CoreProto.U2SecretMap getU2SecretMap() {
      return u2SecretMap_ == null ? com.akaxin.proto.core.CoreProto.U2SecretMap.getDefaultInstance() : u2SecretMap_;
    }
    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    private void setU2SecretMap(com.akaxin.proto.core.CoreProto.U2SecretMap value) {
      if (value == null) {
        throw new NullPointerException();
      }
      u2SecretMap_ = value;
      
      }
    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    private void setU2SecretMap(
        com.akaxin.proto.core.CoreProto.U2SecretMap.Builder builderForValue) {
      u2SecretMap_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    private void mergeU2SecretMap(com.akaxin.proto.core.CoreProto.U2SecretMap value) {
      if (u2SecretMap_ != null &&
          u2SecretMap_ != com.akaxin.proto.core.CoreProto.U2SecretMap.getDefaultInstance()) {
        u2SecretMap_ =
          com.akaxin.proto.core.CoreProto.U2SecretMap.newBuilder(u2SecretMap_).mergeFrom(value).buildPartial();
      } else {
        u2SecretMap_ = value;
      }
      
    }
    /**
     * <pre>
     *加密地图消息
     * </pre>
     *
     * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
     */
    private void clearU2SecretMap() {  u2SecretMap_ = null;
      
    }

    public static final int GROUPMAP_FIELD_NUMBER = 16;
    private com.akaxin.proto.core.CoreProto.GroupMap groupMap_;
    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    public boolean hasGroupMap() {
      return groupMap_ != null;
    }
    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupMap getGroupMap() {
      return groupMap_ == null ? com.akaxin.proto.core.CoreProto.GroupMap.getDefaultInstance() : groupMap_;
    }
    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    private void setGroupMap(com.akaxin.proto.core.CoreProto.GroupMap value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupMap_ = value;
      
      }
    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    private void setGroupMap(
        com.akaxin.proto.core.CoreProto.GroupMap.Builder builderForValue) {
      groupMap_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    private void mergeGroupMap(com.akaxin.proto.core.CoreProto.GroupMap value) {
      if (groupMap_ != null &&
          groupMap_ != com.akaxin.proto.core.CoreProto.GroupMap.getDefaultInstance()) {
        groupMap_ =
          com.akaxin.proto.core.CoreProto.GroupMap.newBuilder(groupMap_).mergeFrom(value).buildPartial();
      } else {
        groupMap_ = value;
      }
      
    }
    /**
     * <pre>
     *群地图
     * </pre>
     *
     * <code>optional .core.GroupMap groupMap = 16;</code>
     */
    private void clearGroupMap() {  groupMap_ = null;
      
    }

    public static final int GROUPSECRETMAP_FIELD_NUMBER = 17;
    private com.akaxin.proto.core.CoreProto.GroupSecretMap groupSecretMap_;
    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    public boolean hasGroupSecretMap() {
      return groupSecretMap_ != null;
    }
    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupSecretMap getGroupSecretMap() {
      return groupSecretMap_ == null ? com.akaxin.proto.core.CoreProto.GroupSecretMap.getDefaultInstance() : groupSecretMap_;
    }
    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    private void setGroupSecretMap(com.akaxin.proto.core.CoreProto.GroupSecretMap value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupSecretMap_ = value;
      
      }
    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    private void setGroupSecretMap(
        com.akaxin.proto.core.CoreProto.GroupSecretMap.Builder builderForValue) {
      groupSecretMap_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    private void mergeGroupSecretMap(com.akaxin.proto.core.CoreProto.GroupSecretMap value) {
      if (groupSecretMap_ != null &&
          groupSecretMap_ != com.akaxin.proto.core.CoreProto.GroupSecretMap.getDefaultInstance()) {
        groupSecretMap_ =
          com.akaxin.proto.core.CoreProto.GroupSecretMap.newBuilder(groupSecretMap_).mergeFrom(value).buildPartial();
      } else {
        groupSecretMap_ = value;
      }
      
    }
    /**
     * <pre>
     *群加密地图
     * </pre>
     *
     * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
     */
    private void clearGroupSecretMap() {  groupSecretMap_ = null;
      
    }

    public static final int U2MSGNOTICE_FIELD_NUMBER = 18;
    private com.akaxin.proto.core.CoreProto.U2MsgNotice u2MsgNotice_;
    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    public boolean hasU2MsgNotice() {
      return u2MsgNotice_ != null;
    }
    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    public com.akaxin.proto.core.CoreProto.U2MsgNotice getU2MsgNotice() {
      return u2MsgNotice_ == null ? com.akaxin.proto.core.CoreProto.U2MsgNotice.getDefaultInstance() : u2MsgNotice_;
    }
    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    private void setU2MsgNotice(com.akaxin.proto.core.CoreProto.U2MsgNotice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      u2MsgNotice_ = value;
      
      }
    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    private void setU2MsgNotice(
        com.akaxin.proto.core.CoreProto.U2MsgNotice.Builder builderForValue) {
      u2MsgNotice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    private void mergeU2MsgNotice(com.akaxin.proto.core.CoreProto.U2MsgNotice value) {
      if (u2MsgNotice_ != null &&
          u2MsgNotice_ != com.akaxin.proto.core.CoreProto.U2MsgNotice.getDefaultInstance()) {
        u2MsgNotice_ =
          com.akaxin.proto.core.CoreProto.U2MsgNotice.newBuilder(u2MsgNotice_).mergeFrom(value).buildPartial();
      } else {
        u2MsgNotice_ = value;
      }
      
    }
    /**
     * <pre>
     *通知消息
     * </pre>
     *
     * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
     */
    private void clearU2MsgNotice() {  u2MsgNotice_ = null;
      
    }

    public static final int GROUPMSGNOTICE_FIELD_NUMBER = 19;
    private com.akaxin.proto.core.CoreProto.GroupMsgNotice groupMsgNotice_;
    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    public boolean hasGroupMsgNotice() {
      return groupMsgNotice_ != null;
    }
    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupMsgNotice getGroupMsgNotice() {
      return groupMsgNotice_ == null ? com.akaxin.proto.core.CoreProto.GroupMsgNotice.getDefaultInstance() : groupMsgNotice_;
    }
    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    private void setGroupMsgNotice(com.akaxin.proto.core.CoreProto.GroupMsgNotice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupMsgNotice_ = value;
      
      }
    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    private void setGroupMsgNotice(
        com.akaxin.proto.core.CoreProto.GroupMsgNotice.Builder builderForValue) {
      groupMsgNotice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    private void mergeGroupMsgNotice(com.akaxin.proto.core.CoreProto.GroupMsgNotice value) {
      if (groupMsgNotice_ != null &&
          groupMsgNotice_ != com.akaxin.proto.core.CoreProto.GroupMsgNotice.getDefaultInstance()) {
        groupMsgNotice_ =
          com.akaxin.proto.core.CoreProto.GroupMsgNotice.newBuilder(groupMsgNotice_).mergeFrom(value).buildPartial();
      } else {
        groupMsgNotice_ = value;
      }
      
    }
    /**
     * <pre>
     *群消息通知
     * </pre>
     *
     * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
     */
    private void clearGroupMsgNotice() {  groupMsgNotice_ = null;
      
    }

    public static final int U2RECALL_FIELD_NUMBER = 20;
    private com.akaxin.proto.core.CoreProto.U2Recall u2Recall_;
    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    public boolean hasU2Recall() {
      return u2Recall_ != null;
    }
    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    public com.akaxin.proto.core.CoreProto.U2Recall getU2Recall() {
      return u2Recall_ == null ? com.akaxin.proto.core.CoreProto.U2Recall.getDefaultInstance() : u2Recall_;
    }
    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    private void setU2Recall(com.akaxin.proto.core.CoreProto.U2Recall value) {
      if (value == null) {
        throw new NullPointerException();
      }
      u2Recall_ = value;
      
      }
    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    private void setU2Recall(
        com.akaxin.proto.core.CoreProto.U2Recall.Builder builderForValue) {
      u2Recall_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    private void mergeU2Recall(com.akaxin.proto.core.CoreProto.U2Recall value) {
      if (u2Recall_ != null &&
          u2Recall_ != com.akaxin.proto.core.CoreProto.U2Recall.getDefaultInstance()) {
        u2Recall_ =
          com.akaxin.proto.core.CoreProto.U2Recall.newBuilder(u2Recall_).mergeFrom(value).buildPartial();
      } else {
        u2Recall_ = value;
      }
      
    }
    /**
     * <pre>
     *召回消息
     * </pre>
     *
     * <code>optional .core.U2Recall u2Recall = 20;</code>
     */
    private void clearU2Recall() {  u2Recall_ = null;
      
    }

    public static final int GROUPRECALL_FIELD_NUMBER = 21;
    private com.akaxin.proto.core.CoreProto.GroupRecall groupRecall_;
    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    public boolean hasGroupRecall() {
      return groupRecall_ != null;
    }
    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupRecall getGroupRecall() {
      return groupRecall_ == null ? com.akaxin.proto.core.CoreProto.GroupRecall.getDefaultInstance() : groupRecall_;
    }
    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    private void setGroupRecall(com.akaxin.proto.core.CoreProto.GroupRecall value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupRecall_ = value;
      
      }
    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    private void setGroupRecall(
        com.akaxin.proto.core.CoreProto.GroupRecall.Builder builderForValue) {
      groupRecall_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    private void mergeGroupRecall(com.akaxin.proto.core.CoreProto.GroupRecall value) {
      if (groupRecall_ != null &&
          groupRecall_ != com.akaxin.proto.core.CoreProto.GroupRecall.getDefaultInstance()) {
        groupRecall_ =
          com.akaxin.proto.core.CoreProto.GroupRecall.newBuilder(groupRecall_).mergeFrom(value).buildPartial();
      } else {
        groupRecall_ = value;
      }
      
    }
    /**
     * <pre>
     *群组召回消息
     * </pre>
     *
     * <code>optional .core.GroupRecall groupRecall = 21;</code>
     */
    private void clearGroupRecall() {  groupRecall_ = null;
      
    }

    public static final int U2WEB_FIELD_NUMBER = 22;
    private com.akaxin.proto.core.CoreProto.U2Web u2Web_;
    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    public boolean hasU2Web() {
      return u2Web_ != null;
    }
    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    public com.akaxin.proto.core.CoreProto.U2Web getU2Web() {
      return u2Web_ == null ? com.akaxin.proto.core.CoreProto.U2Web.getDefaultInstance() : u2Web_;
    }
    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    private void setU2Web(com.akaxin.proto.core.CoreProto.U2Web value) {
      if (value == null) {
        throw new NullPointerException();
      }
      u2Web_ = value;
      
      }
    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    private void setU2Web(
        com.akaxin.proto.core.CoreProto.U2Web.Builder builderForValue) {
      u2Web_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    private void mergeU2Web(com.akaxin.proto.core.CoreProto.U2Web value) {
      if (u2Web_ != null &&
          u2Web_ != com.akaxin.proto.core.CoreProto.U2Web.getDefaultInstance()) {
        u2Web_ =
          com.akaxin.proto.core.CoreProto.U2Web.newBuilder(u2Web_).mergeFrom(value).buildPartial();
      } else {
        u2Web_ = value;
      }
      
    }
    /**
     * <pre>
     *web消息
     * </pre>
     *
     * <code>optional .core.U2Web u2Web = 22;</code>
     */
    private void clearU2Web() {  u2Web_ = null;
      
    }

    public static final int GROUPWEB_FIELD_NUMBER = 23;
    private com.akaxin.proto.core.CoreProto.GroupWeb groupWeb_;
    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    public boolean hasGroupWeb() {
      return groupWeb_ != null;
    }
    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupWeb getGroupWeb() {
      return groupWeb_ == null ? com.akaxin.proto.core.CoreProto.GroupWeb.getDefaultInstance() : groupWeb_;
    }
    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    private void setGroupWeb(com.akaxin.proto.core.CoreProto.GroupWeb value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupWeb_ = value;
      
      }
    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    private void setGroupWeb(
        com.akaxin.proto.core.CoreProto.GroupWeb.Builder builderForValue) {
      groupWeb_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    private void mergeGroupWeb(com.akaxin.proto.core.CoreProto.GroupWeb value) {
      if (groupWeb_ != null &&
          groupWeb_ != com.akaxin.proto.core.CoreProto.GroupWeb.getDefaultInstance()) {
        groupWeb_ =
          com.akaxin.proto.core.CoreProto.GroupWeb.newBuilder(groupWeb_).mergeFrom(value).buildPartial();
      } else {
        groupWeb_ = value;
      }
      
    }
    /**
     * <pre>
     *群组web消息
     * </pre>
     *
     * <code>optional .core.GroupWeb groupWeb = 23;</code>
     */
    private void clearGroupWeb() {  groupWeb_ = null;
      
    }

    public static final int U2WEBNOTICE_FIELD_NUMBER = 24;
    private com.akaxin.proto.core.CoreProto.U2WebNotice u2WebNotice_;
    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    public boolean hasU2WebNotice() {
      return u2WebNotice_ != null;
    }
    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    public com.akaxin.proto.core.CoreProto.U2WebNotice getU2WebNotice() {
      return u2WebNotice_ == null ? com.akaxin.proto.core.CoreProto.U2WebNotice.getDefaultInstance() : u2WebNotice_;
    }
    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    private void setU2WebNotice(com.akaxin.proto.core.CoreProto.U2WebNotice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      u2WebNotice_ = value;
      
      }
    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    private void setU2WebNotice(
        com.akaxin.proto.core.CoreProto.U2WebNotice.Builder builderForValue) {
      u2WebNotice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    private void mergeU2WebNotice(com.akaxin.proto.core.CoreProto.U2WebNotice value) {
      if (u2WebNotice_ != null &&
          u2WebNotice_ != com.akaxin.proto.core.CoreProto.U2WebNotice.getDefaultInstance()) {
        u2WebNotice_ =
          com.akaxin.proto.core.CoreProto.U2WebNotice.newBuilder(u2WebNotice_).mergeFrom(value).buildPartial();
      } else {
        u2WebNotice_ = value;
      }
      
    }
    /**
     * <pre>
     *web通知消息
     * </pre>
     *
     * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
     */
    private void clearU2WebNotice() {  u2WebNotice_ = null;
      
    }

    public static final int GROUPWEBNOTICE_FIELD_NUMBER = 25;
    private com.akaxin.proto.core.CoreProto.GroupWebNotice groupWebNotice_;
    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    public boolean hasGroupWebNotice() {
      return groupWebNotice_ != null;
    }
    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    public com.akaxin.proto.core.CoreProto.GroupWebNotice getGroupWebNotice() {
      return groupWebNotice_ == null ? com.akaxin.proto.core.CoreProto.GroupWebNotice.getDefaultInstance() : groupWebNotice_;
    }
    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    private void setGroupWebNotice(com.akaxin.proto.core.CoreProto.GroupWebNotice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      groupWebNotice_ = value;
      
      }
    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    private void setGroupWebNotice(
        com.akaxin.proto.core.CoreProto.GroupWebNotice.Builder builderForValue) {
      groupWebNotice_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    private void mergeGroupWebNotice(com.akaxin.proto.core.CoreProto.GroupWebNotice value) {
      if (groupWebNotice_ != null &&
          groupWebNotice_ != com.akaxin.proto.core.CoreProto.GroupWebNotice.getDefaultInstance()) {
        groupWebNotice_ =
          com.akaxin.proto.core.CoreProto.GroupWebNotice.newBuilder(groupWebNotice_).mergeFrom(value).buildPartial();
      } else {
        groupWebNotice_ = value;
      }
      
    }
    /**
     * <pre>
     *群组web通知消息
     * </pre>
     *
     * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
     */
    private void clearGroupWebNotice() {  groupWebNotice_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != com.akaxin.proto.core.CoreProto.MsgType.NOTICE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (text_ != null) {
        output.writeMessage(2, getText());
      }
      if (secretText_ != null) {
        output.writeMessage(3, getSecretText());
      }
      if (groupText_ != null) {
        output.writeMessage(4, getGroupText());
      }
      if (groupSecretText_ != null) {
        output.writeMessage(5, getGroupSecretText());
      }
      if (image_ != null) {
        output.writeMessage(6, getImage());
      }
      if (secretImage_ != null) {
        output.writeMessage(7, getSecretImage());
      }
      if (groupImage_ != null) {
        output.writeMessage(8, getGroupImage());
      }
      if (groupSecretImage_ != null) {
        output.writeMessage(9, getGroupSecretImage());
      }
      if (voice_ != null) {
        output.writeMessage(10, getVoice());
      }
      if (secretVoice_ != null) {
        output.writeMessage(11, getSecretVoice());
      }
      if (groupVoice_ != null) {
        output.writeMessage(12, getGroupVoice());
      }
      if (groupSecretVoice_ != null) {
        output.writeMessage(13, getGroupSecretVoice());
      }
      if (u2Map_ != null) {
        output.writeMessage(14, getU2Map());
      }
      if (u2SecretMap_ != null) {
        output.writeMessage(15, getU2SecretMap());
      }
      if (groupMap_ != null) {
        output.writeMessage(16, getGroupMap());
      }
      if (groupSecretMap_ != null) {
        output.writeMessage(17, getGroupSecretMap());
      }
      if (u2MsgNotice_ != null) {
        output.writeMessage(18, getU2MsgNotice());
      }
      if (groupMsgNotice_ != null) {
        output.writeMessage(19, getGroupMsgNotice());
      }
      if (u2Recall_ != null) {
        output.writeMessage(20, getU2Recall());
      }
      if (groupRecall_ != null) {
        output.writeMessage(21, getGroupRecall());
      }
      if (u2Web_ != null) {
        output.writeMessage(22, getU2Web());
      }
      if (groupWeb_ != null) {
        output.writeMessage(23, getGroupWeb());
      }
      if (u2WebNotice_ != null) {
        output.writeMessage(24, getU2WebNotice());
      }
      if (groupWebNotice_ != null) {
        output.writeMessage(25, getGroupWebNotice());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != com.akaxin.proto.core.CoreProto.MsgType.NOTICE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (text_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getText());
      }
      if (secretText_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSecretText());
      }
      if (groupText_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getGroupText());
      }
      if (groupSecretText_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getGroupSecretText());
      }
      if (image_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getImage());
      }
      if (secretImage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getSecretImage());
      }
      if (groupImage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getGroupImage());
      }
      if (groupSecretImage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getGroupSecretImage());
      }
      if (voice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getVoice());
      }
      if (secretVoice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getSecretVoice());
      }
      if (groupVoice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getGroupVoice());
      }
      if (groupSecretVoice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getGroupSecretVoice());
      }
      if (u2Map_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getU2Map());
      }
      if (u2SecretMap_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getU2SecretMap());
      }
      if (groupMap_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getGroupMap());
      }
      if (groupSecretMap_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getGroupSecretMap());
      }
      if (u2MsgNotice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getU2MsgNotice());
      }
      if (groupMsgNotice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, getGroupMsgNotice());
      }
      if (u2Recall_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, getU2Recall());
      }
      if (groupRecall_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getGroupRecall());
      }
      if (u2Web_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getU2Web());
      }
      if (groupWeb_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getGroupWeb());
      }
      if (u2WebNotice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getU2WebNotice());
      }
      if (groupWebNotice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getGroupWebNotice());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code site.ImCtsMessageRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          ImCtsMessageRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:site.ImCtsMessageRequest)
        com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequestOrBuilder {
      // Construct using com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *消息类型
       * </pre>
       *
       * <code>optional .core.MsgType type = 1;</code>
       */
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <pre>
       *消息类型
       * </pre>
       *
       * <code>optional .core.MsgType type = 1;</code>
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <pre>
       *消息类型
       * </pre>
       *
       * <code>optional .core.MsgType type = 1;</code>
       */
      public com.akaxin.proto.core.CoreProto.MsgType getType() {
        return instance.getType();
      }
      /**
       * <pre>
       *消息类型
       * </pre>
       *
       * <code>optional .core.MsgType type = 1;</code>
       */
      public Builder setType(com.akaxin.proto.core.CoreProto.MsgType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       *消息类型
       * </pre>
       *
       * <code>optional .core.MsgType type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       *二人文本消息
       * </pre>
       *
       * <code>optional .core.MsgText text = 2;</code>
       */
      public boolean hasText() {
        return instance.hasText();
      }
      /**
       * <pre>
       *二人文本消息
       * </pre>
       *
       * <code>optional .core.MsgText text = 2;</code>
       */
      public com.akaxin.proto.core.CoreProto.MsgText getText() {
        return instance.getText();
      }
      /**
       * <pre>
       *二人文本消息
       * </pre>
       *
       * <code>optional .core.MsgText text = 2;</code>
       */
      public Builder setText(com.akaxin.proto.core.CoreProto.MsgText value) {
        copyOnWrite();
        instance.setText(value);
        return this;
        }
      /**
       * <pre>
       *二人文本消息
       * </pre>
       *
       * <code>optional .core.MsgText text = 2;</code>
       */
      public Builder setText(
          com.akaxin.proto.core.CoreProto.MsgText.Builder builderForValue) {
        copyOnWrite();
        instance.setText(builderForValue);
        return this;
      }
      /**
       * <pre>
       *二人文本消息
       * </pre>
       *
       * <code>optional .core.MsgText text = 2;</code>
       */
      public Builder mergeText(com.akaxin.proto.core.CoreProto.MsgText value) {
        copyOnWrite();
        instance.mergeText(value);
        return this;
      }
      /**
       * <pre>
       *二人文本消息
       * </pre>
       *
       * <code>optional .core.MsgText text = 2;</code>
       */
      public Builder clearText() {  copyOnWrite();
        instance.clearText();
        return this;
      }

      /**
       * <pre>
       *二人加密文本消息
       * </pre>
       *
       * <code>optional .core.MsgSecretText secretText = 3;</code>
       */
      public boolean hasSecretText() {
        return instance.hasSecretText();
      }
      /**
       * <pre>
       *二人加密文本消息
       * </pre>
       *
       * <code>optional .core.MsgSecretText secretText = 3;</code>
       */
      public com.akaxin.proto.core.CoreProto.MsgSecretText getSecretText() {
        return instance.getSecretText();
      }
      /**
       * <pre>
       *二人加密文本消息
       * </pre>
       *
       * <code>optional .core.MsgSecretText secretText = 3;</code>
       */
      public Builder setSecretText(com.akaxin.proto.core.CoreProto.MsgSecretText value) {
        copyOnWrite();
        instance.setSecretText(value);
        return this;
        }
      /**
       * <pre>
       *二人加密文本消息
       * </pre>
       *
       * <code>optional .core.MsgSecretText secretText = 3;</code>
       */
      public Builder setSecretText(
          com.akaxin.proto.core.CoreProto.MsgSecretText.Builder builderForValue) {
        copyOnWrite();
        instance.setSecretText(builderForValue);
        return this;
      }
      /**
       * <pre>
       *二人加密文本消息
       * </pre>
       *
       * <code>optional .core.MsgSecretText secretText = 3;</code>
       */
      public Builder mergeSecretText(com.akaxin.proto.core.CoreProto.MsgSecretText value) {
        copyOnWrite();
        instance.mergeSecretText(value);
        return this;
      }
      /**
       * <pre>
       *二人加密文本消息
       * </pre>
       *
       * <code>optional .core.MsgSecretText secretText = 3;</code>
       */
      public Builder clearSecretText() {  copyOnWrite();
        instance.clearSecretText();
        return this;
      }

      /**
       * <pre>
       *群文本消息
       * </pre>
       *
       * <code>optional .core.GroupText groupText = 4;</code>
       */
      public boolean hasGroupText() {
        return instance.hasGroupText();
      }
      /**
       * <pre>
       *群文本消息
       * </pre>
       *
       * <code>optional .core.GroupText groupText = 4;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupText getGroupText() {
        return instance.getGroupText();
      }
      /**
       * <pre>
       *群文本消息
       * </pre>
       *
       * <code>optional .core.GroupText groupText = 4;</code>
       */
      public Builder setGroupText(com.akaxin.proto.core.CoreProto.GroupText value) {
        copyOnWrite();
        instance.setGroupText(value);
        return this;
        }
      /**
       * <pre>
       *群文本消息
       * </pre>
       *
       * <code>optional .core.GroupText groupText = 4;</code>
       */
      public Builder setGroupText(
          com.akaxin.proto.core.CoreProto.GroupText.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupText(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群文本消息
       * </pre>
       *
       * <code>optional .core.GroupText groupText = 4;</code>
       */
      public Builder mergeGroupText(com.akaxin.proto.core.CoreProto.GroupText value) {
        copyOnWrite();
        instance.mergeGroupText(value);
        return this;
      }
      /**
       * <pre>
       *群文本消息
       * </pre>
       *
       * <code>optional .core.GroupText groupText = 4;</code>
       */
      public Builder clearGroupText() {  copyOnWrite();
        instance.clearGroupText();
        return this;
      }

      /**
       * <pre>
       *群加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
       */
      public boolean hasGroupSecretText() {
        return instance.hasGroupSecretText();
      }
      /**
       * <pre>
       *群加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupSecretText getGroupSecretText() {
        return instance.getGroupSecretText();
      }
      /**
       * <pre>
       *群加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
       */
      public Builder setGroupSecretText(com.akaxin.proto.core.CoreProto.GroupSecretText value) {
        copyOnWrite();
        instance.setGroupSecretText(value);
        return this;
        }
      /**
       * <pre>
       *群加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
       */
      public Builder setGroupSecretText(
          com.akaxin.proto.core.CoreProto.GroupSecretText.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupSecretText(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
       */
      public Builder mergeGroupSecretText(com.akaxin.proto.core.CoreProto.GroupSecretText value) {
        copyOnWrite();
        instance.mergeGroupSecretText(value);
        return this;
      }
      /**
       * <pre>
       *群加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretText groupSecretText = 5;</code>
       */
      public Builder clearGroupSecretText() {  copyOnWrite();
        instance.clearGroupSecretText();
        return this;
      }

      /**
       * <pre>
       *二人图片消息
       * </pre>
       *
       * <code>optional .core.MsgImage image = 6;</code>
       */
      public boolean hasImage() {
        return instance.hasImage();
      }
      /**
       * <pre>
       *二人图片消息
       * </pre>
       *
       * <code>optional .core.MsgImage image = 6;</code>
       */
      public com.akaxin.proto.core.CoreProto.MsgImage getImage() {
        return instance.getImage();
      }
      /**
       * <pre>
       *二人图片消息
       * </pre>
       *
       * <code>optional .core.MsgImage image = 6;</code>
       */
      public Builder setImage(com.akaxin.proto.core.CoreProto.MsgImage value) {
        copyOnWrite();
        instance.setImage(value);
        return this;
        }
      /**
       * <pre>
       *二人图片消息
       * </pre>
       *
       * <code>optional .core.MsgImage image = 6;</code>
       */
      public Builder setImage(
          com.akaxin.proto.core.CoreProto.MsgImage.Builder builderForValue) {
        copyOnWrite();
        instance.setImage(builderForValue);
        return this;
      }
      /**
       * <pre>
       *二人图片消息
       * </pre>
       *
       * <code>optional .core.MsgImage image = 6;</code>
       */
      public Builder mergeImage(com.akaxin.proto.core.CoreProto.MsgImage value) {
        copyOnWrite();
        instance.mergeImage(value);
        return this;
      }
      /**
       * <pre>
       *二人图片消息
       * </pre>
       *
       * <code>optional .core.MsgImage image = 6;</code>
       */
      public Builder clearImage() {  copyOnWrite();
        instance.clearImage();
        return this;
      }

      /**
       * <pre>
       *二人加密图片消息
       * </pre>
       *
       * <code>optional .core.MsgSecretImage secretImage = 7;</code>
       */
      public boolean hasSecretImage() {
        return instance.hasSecretImage();
      }
      /**
       * <pre>
       *二人加密图片消息
       * </pre>
       *
       * <code>optional .core.MsgSecretImage secretImage = 7;</code>
       */
      public com.akaxin.proto.core.CoreProto.MsgSecretImage getSecretImage() {
        return instance.getSecretImage();
      }
      /**
       * <pre>
       *二人加密图片消息
       * </pre>
       *
       * <code>optional .core.MsgSecretImage secretImage = 7;</code>
       */
      public Builder setSecretImage(com.akaxin.proto.core.CoreProto.MsgSecretImage value) {
        copyOnWrite();
        instance.setSecretImage(value);
        return this;
        }
      /**
       * <pre>
       *二人加密图片消息
       * </pre>
       *
       * <code>optional .core.MsgSecretImage secretImage = 7;</code>
       */
      public Builder setSecretImage(
          com.akaxin.proto.core.CoreProto.MsgSecretImage.Builder builderForValue) {
        copyOnWrite();
        instance.setSecretImage(builderForValue);
        return this;
      }
      /**
       * <pre>
       *二人加密图片消息
       * </pre>
       *
       * <code>optional .core.MsgSecretImage secretImage = 7;</code>
       */
      public Builder mergeSecretImage(com.akaxin.proto.core.CoreProto.MsgSecretImage value) {
        copyOnWrite();
        instance.mergeSecretImage(value);
        return this;
      }
      /**
       * <pre>
       *二人加密图片消息
       * </pre>
       *
       * <code>optional .core.MsgSecretImage secretImage = 7;</code>
       */
      public Builder clearSecretImage() {  copyOnWrite();
        instance.clearSecretImage();
        return this;
      }

      /**
       * <pre>
       *群图片消息
       * </pre>
       *
       * <code>optional .core.GroupImage groupImage = 8;</code>
       */
      public boolean hasGroupImage() {
        return instance.hasGroupImage();
      }
      /**
       * <pre>
       *群图片消息
       * </pre>
       *
       * <code>optional .core.GroupImage groupImage = 8;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupImage getGroupImage() {
        return instance.getGroupImage();
      }
      /**
       * <pre>
       *群图片消息
       * </pre>
       *
       * <code>optional .core.GroupImage groupImage = 8;</code>
       */
      public Builder setGroupImage(com.akaxin.proto.core.CoreProto.GroupImage value) {
        copyOnWrite();
        instance.setGroupImage(value);
        return this;
        }
      /**
       * <pre>
       *群图片消息
       * </pre>
       *
       * <code>optional .core.GroupImage groupImage = 8;</code>
       */
      public Builder setGroupImage(
          com.akaxin.proto.core.CoreProto.GroupImage.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupImage(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群图片消息
       * </pre>
       *
       * <code>optional .core.GroupImage groupImage = 8;</code>
       */
      public Builder mergeGroupImage(com.akaxin.proto.core.CoreProto.GroupImage value) {
        copyOnWrite();
        instance.mergeGroupImage(value);
        return this;
      }
      /**
       * <pre>
       *群图片消息
       * </pre>
       *
       * <code>optional .core.GroupImage groupImage = 8;</code>
       */
      public Builder clearGroupImage() {  copyOnWrite();
        instance.clearGroupImage();
        return this;
      }

      /**
       * <pre>
       *群图片加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
       */
      public boolean hasGroupSecretImage() {
        return instance.hasGroupSecretImage();
      }
      /**
       * <pre>
       *群图片加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupSecretImage getGroupSecretImage() {
        return instance.getGroupSecretImage();
      }
      /**
       * <pre>
       *群图片加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
       */
      public Builder setGroupSecretImage(com.akaxin.proto.core.CoreProto.GroupSecretImage value) {
        copyOnWrite();
        instance.setGroupSecretImage(value);
        return this;
        }
      /**
       * <pre>
       *群图片加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
       */
      public Builder setGroupSecretImage(
          com.akaxin.proto.core.CoreProto.GroupSecretImage.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupSecretImage(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群图片加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
       */
      public Builder mergeGroupSecretImage(com.akaxin.proto.core.CoreProto.GroupSecretImage value) {
        copyOnWrite();
        instance.mergeGroupSecretImage(value);
        return this;
      }
      /**
       * <pre>
       *群图片加密消息
       * </pre>
       *
       * <code>optional .core.GroupSecretImage groupSecretImage = 9;</code>
       */
      public Builder clearGroupSecretImage() {  copyOnWrite();
        instance.clearGroupSecretImage();
        return this;
      }

      /**
       * <pre>
       *二人语音
       * </pre>
       *
       * <code>optional .core.MsgVoice voice = 10;</code>
       */
      public boolean hasVoice() {
        return instance.hasVoice();
      }
      /**
       * <pre>
       *二人语音
       * </pre>
       *
       * <code>optional .core.MsgVoice voice = 10;</code>
       */
      public com.akaxin.proto.core.CoreProto.MsgVoice getVoice() {
        return instance.getVoice();
      }
      /**
       * <pre>
       *二人语音
       * </pre>
       *
       * <code>optional .core.MsgVoice voice = 10;</code>
       */
      public Builder setVoice(com.akaxin.proto.core.CoreProto.MsgVoice value) {
        copyOnWrite();
        instance.setVoice(value);
        return this;
        }
      /**
       * <pre>
       *二人语音
       * </pre>
       *
       * <code>optional .core.MsgVoice voice = 10;</code>
       */
      public Builder setVoice(
          com.akaxin.proto.core.CoreProto.MsgVoice.Builder builderForValue) {
        copyOnWrite();
        instance.setVoice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *二人语音
       * </pre>
       *
       * <code>optional .core.MsgVoice voice = 10;</code>
       */
      public Builder mergeVoice(com.akaxin.proto.core.CoreProto.MsgVoice value) {
        copyOnWrite();
        instance.mergeVoice(value);
        return this;
      }
      /**
       * <pre>
       *二人语音
       * </pre>
       *
       * <code>optional .core.MsgVoice voice = 10;</code>
       */
      public Builder clearVoice() {  copyOnWrite();
        instance.clearVoice();
        return this;
      }

      /**
       * <pre>
       *二人加密语音
       * </pre>
       *
       * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
       */
      public boolean hasSecretVoice() {
        return instance.hasSecretVoice();
      }
      /**
       * <pre>
       *二人加密语音
       * </pre>
       *
       * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
       */
      public com.akaxin.proto.core.CoreProto.MsgSecretVoice getSecretVoice() {
        return instance.getSecretVoice();
      }
      /**
       * <pre>
       *二人加密语音
       * </pre>
       *
       * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
       */
      public Builder setSecretVoice(com.akaxin.proto.core.CoreProto.MsgSecretVoice value) {
        copyOnWrite();
        instance.setSecretVoice(value);
        return this;
        }
      /**
       * <pre>
       *二人加密语音
       * </pre>
       *
       * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
       */
      public Builder setSecretVoice(
          com.akaxin.proto.core.CoreProto.MsgSecretVoice.Builder builderForValue) {
        copyOnWrite();
        instance.setSecretVoice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *二人加密语音
       * </pre>
       *
       * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
       */
      public Builder mergeSecretVoice(com.akaxin.proto.core.CoreProto.MsgSecretVoice value) {
        copyOnWrite();
        instance.mergeSecretVoice(value);
        return this;
      }
      /**
       * <pre>
       *二人加密语音
       * </pre>
       *
       * <code>optional .core.MsgSecretVoice secretVoice = 11;</code>
       */
      public Builder clearSecretVoice() {  copyOnWrite();
        instance.clearSecretVoice();
        return this;
      }

      /**
       * <pre>
       *群语音
       * </pre>
       *
       * <code>optional .core.GroupVoice groupVoice = 12;</code>
       */
      public boolean hasGroupVoice() {
        return instance.hasGroupVoice();
      }
      /**
       * <pre>
       *群语音
       * </pre>
       *
       * <code>optional .core.GroupVoice groupVoice = 12;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupVoice getGroupVoice() {
        return instance.getGroupVoice();
      }
      /**
       * <pre>
       *群语音
       * </pre>
       *
       * <code>optional .core.GroupVoice groupVoice = 12;</code>
       */
      public Builder setGroupVoice(com.akaxin.proto.core.CoreProto.GroupVoice value) {
        copyOnWrite();
        instance.setGroupVoice(value);
        return this;
        }
      /**
       * <pre>
       *群语音
       * </pre>
       *
       * <code>optional .core.GroupVoice groupVoice = 12;</code>
       */
      public Builder setGroupVoice(
          com.akaxin.proto.core.CoreProto.GroupVoice.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupVoice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群语音
       * </pre>
       *
       * <code>optional .core.GroupVoice groupVoice = 12;</code>
       */
      public Builder mergeGroupVoice(com.akaxin.proto.core.CoreProto.GroupVoice value) {
        copyOnWrite();
        instance.mergeGroupVoice(value);
        return this;
      }
      /**
       * <pre>
       *群语音
       * </pre>
       *
       * <code>optional .core.GroupVoice groupVoice = 12;</code>
       */
      public Builder clearGroupVoice() {  copyOnWrite();
        instance.clearGroupVoice();
        return this;
      }

      /**
       * <pre>
       *群加密语音
       * </pre>
       *
       * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
       */
      public boolean hasGroupSecretVoice() {
        return instance.hasGroupSecretVoice();
      }
      /**
       * <pre>
       *群加密语音
       * </pre>
       *
       * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupSecretVoice getGroupSecretVoice() {
        return instance.getGroupSecretVoice();
      }
      /**
       * <pre>
       *群加密语音
       * </pre>
       *
       * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
       */
      public Builder setGroupSecretVoice(com.akaxin.proto.core.CoreProto.GroupSecretVoice value) {
        copyOnWrite();
        instance.setGroupSecretVoice(value);
        return this;
        }
      /**
       * <pre>
       *群加密语音
       * </pre>
       *
       * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
       */
      public Builder setGroupSecretVoice(
          com.akaxin.proto.core.CoreProto.GroupSecretVoice.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupSecretVoice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群加密语音
       * </pre>
       *
       * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
       */
      public Builder mergeGroupSecretVoice(com.akaxin.proto.core.CoreProto.GroupSecretVoice value) {
        copyOnWrite();
        instance.mergeGroupSecretVoice(value);
        return this;
      }
      /**
       * <pre>
       *群加密语音
       * </pre>
       *
       * <code>optional .core.GroupSecretVoice groupSecretVoice = 13;</code>
       */
      public Builder clearGroupSecretVoice() {  copyOnWrite();
        instance.clearGroupSecretVoice();
        return this;
      }

      /**
       * <pre>
       *v0.4.3 版本未使用
       * </pre>
       *
       * <code>optional .core.U2Map u2Map = 14;</code>
       */
      public boolean hasU2Map() {
        return instance.hasU2Map();
      }
      /**
       * <pre>
       *v0.4.3 版本未使用
       * </pre>
       *
       * <code>optional .core.U2Map u2Map = 14;</code>
       */
      public com.akaxin.proto.core.CoreProto.U2Map getU2Map() {
        return instance.getU2Map();
      }
      /**
       * <pre>
       *v0.4.3 版本未使用
       * </pre>
       *
       * <code>optional .core.U2Map u2Map = 14;</code>
       */
      public Builder setU2Map(com.akaxin.proto.core.CoreProto.U2Map value) {
        copyOnWrite();
        instance.setU2Map(value);
        return this;
        }
      /**
       * <pre>
       *v0.4.3 版本未使用
       * </pre>
       *
       * <code>optional .core.U2Map u2Map = 14;</code>
       */
      public Builder setU2Map(
          com.akaxin.proto.core.CoreProto.U2Map.Builder builderForValue) {
        copyOnWrite();
        instance.setU2Map(builderForValue);
        return this;
      }
      /**
       * <pre>
       *v0.4.3 版本未使用
       * </pre>
       *
       * <code>optional .core.U2Map u2Map = 14;</code>
       */
      public Builder mergeU2Map(com.akaxin.proto.core.CoreProto.U2Map value) {
        copyOnWrite();
        instance.mergeU2Map(value);
        return this;
      }
      /**
       * <pre>
       *v0.4.3 版本未使用
       * </pre>
       *
       * <code>optional .core.U2Map u2Map = 14;</code>
       */
      public Builder clearU2Map() {  copyOnWrite();
        instance.clearU2Map();
        return this;
      }

      /**
       * <pre>
       *加密地图消息
       * </pre>
       *
       * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
       */
      public boolean hasU2SecretMap() {
        return instance.hasU2SecretMap();
      }
      /**
       * <pre>
       *加密地图消息
       * </pre>
       *
       * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
       */
      public com.akaxin.proto.core.CoreProto.U2SecretMap getU2SecretMap() {
        return instance.getU2SecretMap();
      }
      /**
       * <pre>
       *加密地图消息
       * </pre>
       *
       * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
       */
      public Builder setU2SecretMap(com.akaxin.proto.core.CoreProto.U2SecretMap value) {
        copyOnWrite();
        instance.setU2SecretMap(value);
        return this;
        }
      /**
       * <pre>
       *加密地图消息
       * </pre>
       *
       * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
       */
      public Builder setU2SecretMap(
          com.akaxin.proto.core.CoreProto.U2SecretMap.Builder builderForValue) {
        copyOnWrite();
        instance.setU2SecretMap(builderForValue);
        return this;
      }
      /**
       * <pre>
       *加密地图消息
       * </pre>
       *
       * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
       */
      public Builder mergeU2SecretMap(com.akaxin.proto.core.CoreProto.U2SecretMap value) {
        copyOnWrite();
        instance.mergeU2SecretMap(value);
        return this;
      }
      /**
       * <pre>
       *加密地图消息
       * </pre>
       *
       * <code>optional .core.U2SecretMap u2SecretMap = 15;</code>
       */
      public Builder clearU2SecretMap() {  copyOnWrite();
        instance.clearU2SecretMap();
        return this;
      }

      /**
       * <pre>
       *群地图
       * </pre>
       *
       * <code>optional .core.GroupMap groupMap = 16;</code>
       */
      public boolean hasGroupMap() {
        return instance.hasGroupMap();
      }
      /**
       * <pre>
       *群地图
       * </pre>
       *
       * <code>optional .core.GroupMap groupMap = 16;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupMap getGroupMap() {
        return instance.getGroupMap();
      }
      /**
       * <pre>
       *群地图
       * </pre>
       *
       * <code>optional .core.GroupMap groupMap = 16;</code>
       */
      public Builder setGroupMap(com.akaxin.proto.core.CoreProto.GroupMap value) {
        copyOnWrite();
        instance.setGroupMap(value);
        return this;
        }
      /**
       * <pre>
       *群地图
       * </pre>
       *
       * <code>optional .core.GroupMap groupMap = 16;</code>
       */
      public Builder setGroupMap(
          com.akaxin.proto.core.CoreProto.GroupMap.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupMap(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群地图
       * </pre>
       *
       * <code>optional .core.GroupMap groupMap = 16;</code>
       */
      public Builder mergeGroupMap(com.akaxin.proto.core.CoreProto.GroupMap value) {
        copyOnWrite();
        instance.mergeGroupMap(value);
        return this;
      }
      /**
       * <pre>
       *群地图
       * </pre>
       *
       * <code>optional .core.GroupMap groupMap = 16;</code>
       */
      public Builder clearGroupMap() {  copyOnWrite();
        instance.clearGroupMap();
        return this;
      }

      /**
       * <pre>
       *群加密地图
       * </pre>
       *
       * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
       */
      public boolean hasGroupSecretMap() {
        return instance.hasGroupSecretMap();
      }
      /**
       * <pre>
       *群加密地图
       * </pre>
       *
       * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupSecretMap getGroupSecretMap() {
        return instance.getGroupSecretMap();
      }
      /**
       * <pre>
       *群加密地图
       * </pre>
       *
       * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
       */
      public Builder setGroupSecretMap(com.akaxin.proto.core.CoreProto.GroupSecretMap value) {
        copyOnWrite();
        instance.setGroupSecretMap(value);
        return this;
        }
      /**
       * <pre>
       *群加密地图
       * </pre>
       *
       * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
       */
      public Builder setGroupSecretMap(
          com.akaxin.proto.core.CoreProto.GroupSecretMap.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupSecretMap(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群加密地图
       * </pre>
       *
       * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
       */
      public Builder mergeGroupSecretMap(com.akaxin.proto.core.CoreProto.GroupSecretMap value) {
        copyOnWrite();
        instance.mergeGroupSecretMap(value);
        return this;
      }
      /**
       * <pre>
       *群加密地图
       * </pre>
       *
       * <code>optional .core.GroupSecretMap groupSecretMap = 17;</code>
       */
      public Builder clearGroupSecretMap() {  copyOnWrite();
        instance.clearGroupSecretMap();
        return this;
      }

      /**
       * <pre>
       *通知消息
       * </pre>
       *
       * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
       */
      public boolean hasU2MsgNotice() {
        return instance.hasU2MsgNotice();
      }
      /**
       * <pre>
       *通知消息
       * </pre>
       *
       * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
       */
      public com.akaxin.proto.core.CoreProto.U2MsgNotice getU2MsgNotice() {
        return instance.getU2MsgNotice();
      }
      /**
       * <pre>
       *通知消息
       * </pre>
       *
       * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
       */
      public Builder setU2MsgNotice(com.akaxin.proto.core.CoreProto.U2MsgNotice value) {
        copyOnWrite();
        instance.setU2MsgNotice(value);
        return this;
        }
      /**
       * <pre>
       *通知消息
       * </pre>
       *
       * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
       */
      public Builder setU2MsgNotice(
          com.akaxin.proto.core.CoreProto.U2MsgNotice.Builder builderForValue) {
        copyOnWrite();
        instance.setU2MsgNotice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *通知消息
       * </pre>
       *
       * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
       */
      public Builder mergeU2MsgNotice(com.akaxin.proto.core.CoreProto.U2MsgNotice value) {
        copyOnWrite();
        instance.mergeU2MsgNotice(value);
        return this;
      }
      /**
       * <pre>
       *通知消息
       * </pre>
       *
       * <code>optional .core.U2MsgNotice u2MsgNotice = 18;</code>
       */
      public Builder clearU2MsgNotice() {  copyOnWrite();
        instance.clearU2MsgNotice();
        return this;
      }

      /**
       * <pre>
       *群消息通知
       * </pre>
       *
       * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
       */
      public boolean hasGroupMsgNotice() {
        return instance.hasGroupMsgNotice();
      }
      /**
       * <pre>
       *群消息通知
       * </pre>
       *
       * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupMsgNotice getGroupMsgNotice() {
        return instance.getGroupMsgNotice();
      }
      /**
       * <pre>
       *群消息通知
       * </pre>
       *
       * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
       */
      public Builder setGroupMsgNotice(com.akaxin.proto.core.CoreProto.GroupMsgNotice value) {
        copyOnWrite();
        instance.setGroupMsgNotice(value);
        return this;
        }
      /**
       * <pre>
       *群消息通知
       * </pre>
       *
       * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
       */
      public Builder setGroupMsgNotice(
          com.akaxin.proto.core.CoreProto.GroupMsgNotice.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupMsgNotice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群消息通知
       * </pre>
       *
       * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
       */
      public Builder mergeGroupMsgNotice(com.akaxin.proto.core.CoreProto.GroupMsgNotice value) {
        copyOnWrite();
        instance.mergeGroupMsgNotice(value);
        return this;
      }
      /**
       * <pre>
       *群消息通知
       * </pre>
       *
       * <code>optional .core.GroupMsgNotice groupMsgNotice = 19;</code>
       */
      public Builder clearGroupMsgNotice() {  copyOnWrite();
        instance.clearGroupMsgNotice();
        return this;
      }

      /**
       * <pre>
       *召回消息
       * </pre>
       *
       * <code>optional .core.U2Recall u2Recall = 20;</code>
       */
      public boolean hasU2Recall() {
        return instance.hasU2Recall();
      }
      /**
       * <pre>
       *召回消息
       * </pre>
       *
       * <code>optional .core.U2Recall u2Recall = 20;</code>
       */
      public com.akaxin.proto.core.CoreProto.U2Recall getU2Recall() {
        return instance.getU2Recall();
      }
      /**
       * <pre>
       *召回消息
       * </pre>
       *
       * <code>optional .core.U2Recall u2Recall = 20;</code>
       */
      public Builder setU2Recall(com.akaxin.proto.core.CoreProto.U2Recall value) {
        copyOnWrite();
        instance.setU2Recall(value);
        return this;
        }
      /**
       * <pre>
       *召回消息
       * </pre>
       *
       * <code>optional .core.U2Recall u2Recall = 20;</code>
       */
      public Builder setU2Recall(
          com.akaxin.proto.core.CoreProto.U2Recall.Builder builderForValue) {
        copyOnWrite();
        instance.setU2Recall(builderForValue);
        return this;
      }
      /**
       * <pre>
       *召回消息
       * </pre>
       *
       * <code>optional .core.U2Recall u2Recall = 20;</code>
       */
      public Builder mergeU2Recall(com.akaxin.proto.core.CoreProto.U2Recall value) {
        copyOnWrite();
        instance.mergeU2Recall(value);
        return this;
      }
      /**
       * <pre>
       *召回消息
       * </pre>
       *
       * <code>optional .core.U2Recall u2Recall = 20;</code>
       */
      public Builder clearU2Recall() {  copyOnWrite();
        instance.clearU2Recall();
        return this;
      }

      /**
       * <pre>
       *群组召回消息
       * </pre>
       *
       * <code>optional .core.GroupRecall groupRecall = 21;</code>
       */
      public boolean hasGroupRecall() {
        return instance.hasGroupRecall();
      }
      /**
       * <pre>
       *群组召回消息
       * </pre>
       *
       * <code>optional .core.GroupRecall groupRecall = 21;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupRecall getGroupRecall() {
        return instance.getGroupRecall();
      }
      /**
       * <pre>
       *群组召回消息
       * </pre>
       *
       * <code>optional .core.GroupRecall groupRecall = 21;</code>
       */
      public Builder setGroupRecall(com.akaxin.proto.core.CoreProto.GroupRecall value) {
        copyOnWrite();
        instance.setGroupRecall(value);
        return this;
        }
      /**
       * <pre>
       *群组召回消息
       * </pre>
       *
       * <code>optional .core.GroupRecall groupRecall = 21;</code>
       */
      public Builder setGroupRecall(
          com.akaxin.proto.core.CoreProto.GroupRecall.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupRecall(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群组召回消息
       * </pre>
       *
       * <code>optional .core.GroupRecall groupRecall = 21;</code>
       */
      public Builder mergeGroupRecall(com.akaxin.proto.core.CoreProto.GroupRecall value) {
        copyOnWrite();
        instance.mergeGroupRecall(value);
        return this;
      }
      /**
       * <pre>
       *群组召回消息
       * </pre>
       *
       * <code>optional .core.GroupRecall groupRecall = 21;</code>
       */
      public Builder clearGroupRecall() {  copyOnWrite();
        instance.clearGroupRecall();
        return this;
      }

      /**
       * <pre>
       *web消息
       * </pre>
       *
       * <code>optional .core.U2Web u2Web = 22;</code>
       */
      public boolean hasU2Web() {
        return instance.hasU2Web();
      }
      /**
       * <pre>
       *web消息
       * </pre>
       *
       * <code>optional .core.U2Web u2Web = 22;</code>
       */
      public com.akaxin.proto.core.CoreProto.U2Web getU2Web() {
        return instance.getU2Web();
      }
      /**
       * <pre>
       *web消息
       * </pre>
       *
       * <code>optional .core.U2Web u2Web = 22;</code>
       */
      public Builder setU2Web(com.akaxin.proto.core.CoreProto.U2Web value) {
        copyOnWrite();
        instance.setU2Web(value);
        return this;
        }
      /**
       * <pre>
       *web消息
       * </pre>
       *
       * <code>optional .core.U2Web u2Web = 22;</code>
       */
      public Builder setU2Web(
          com.akaxin.proto.core.CoreProto.U2Web.Builder builderForValue) {
        copyOnWrite();
        instance.setU2Web(builderForValue);
        return this;
      }
      /**
       * <pre>
       *web消息
       * </pre>
       *
       * <code>optional .core.U2Web u2Web = 22;</code>
       */
      public Builder mergeU2Web(com.akaxin.proto.core.CoreProto.U2Web value) {
        copyOnWrite();
        instance.mergeU2Web(value);
        return this;
      }
      /**
       * <pre>
       *web消息
       * </pre>
       *
       * <code>optional .core.U2Web u2Web = 22;</code>
       */
      public Builder clearU2Web() {  copyOnWrite();
        instance.clearU2Web();
        return this;
      }

      /**
       * <pre>
       *群组web消息
       * </pre>
       *
       * <code>optional .core.GroupWeb groupWeb = 23;</code>
       */
      public boolean hasGroupWeb() {
        return instance.hasGroupWeb();
      }
      /**
       * <pre>
       *群组web消息
       * </pre>
       *
       * <code>optional .core.GroupWeb groupWeb = 23;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupWeb getGroupWeb() {
        return instance.getGroupWeb();
      }
      /**
       * <pre>
       *群组web消息
       * </pre>
       *
       * <code>optional .core.GroupWeb groupWeb = 23;</code>
       */
      public Builder setGroupWeb(com.akaxin.proto.core.CoreProto.GroupWeb value) {
        copyOnWrite();
        instance.setGroupWeb(value);
        return this;
        }
      /**
       * <pre>
       *群组web消息
       * </pre>
       *
       * <code>optional .core.GroupWeb groupWeb = 23;</code>
       */
      public Builder setGroupWeb(
          com.akaxin.proto.core.CoreProto.GroupWeb.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupWeb(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群组web消息
       * </pre>
       *
       * <code>optional .core.GroupWeb groupWeb = 23;</code>
       */
      public Builder mergeGroupWeb(com.akaxin.proto.core.CoreProto.GroupWeb value) {
        copyOnWrite();
        instance.mergeGroupWeb(value);
        return this;
      }
      /**
       * <pre>
       *群组web消息
       * </pre>
       *
       * <code>optional .core.GroupWeb groupWeb = 23;</code>
       */
      public Builder clearGroupWeb() {  copyOnWrite();
        instance.clearGroupWeb();
        return this;
      }

      /**
       * <pre>
       *web通知消息
       * </pre>
       *
       * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
       */
      public boolean hasU2WebNotice() {
        return instance.hasU2WebNotice();
      }
      /**
       * <pre>
       *web通知消息
       * </pre>
       *
       * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
       */
      public com.akaxin.proto.core.CoreProto.U2WebNotice getU2WebNotice() {
        return instance.getU2WebNotice();
      }
      /**
       * <pre>
       *web通知消息
       * </pre>
       *
       * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
       */
      public Builder setU2WebNotice(com.akaxin.proto.core.CoreProto.U2WebNotice value) {
        copyOnWrite();
        instance.setU2WebNotice(value);
        return this;
        }
      /**
       * <pre>
       *web通知消息
       * </pre>
       *
       * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
       */
      public Builder setU2WebNotice(
          com.akaxin.proto.core.CoreProto.U2WebNotice.Builder builderForValue) {
        copyOnWrite();
        instance.setU2WebNotice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *web通知消息
       * </pre>
       *
       * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
       */
      public Builder mergeU2WebNotice(com.akaxin.proto.core.CoreProto.U2WebNotice value) {
        copyOnWrite();
        instance.mergeU2WebNotice(value);
        return this;
      }
      /**
       * <pre>
       *web通知消息
       * </pre>
       *
       * <code>optional .core.U2WebNotice u2WebNotice = 24;</code>
       */
      public Builder clearU2WebNotice() {  copyOnWrite();
        instance.clearU2WebNotice();
        return this;
      }

      /**
       * <pre>
       *群组web通知消息
       * </pre>
       *
       * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
       */
      public boolean hasGroupWebNotice() {
        return instance.hasGroupWebNotice();
      }
      /**
       * <pre>
       *群组web通知消息
       * </pre>
       *
       * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
       */
      public com.akaxin.proto.core.CoreProto.GroupWebNotice getGroupWebNotice() {
        return instance.getGroupWebNotice();
      }
      /**
       * <pre>
       *群组web通知消息
       * </pre>
       *
       * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
       */
      public Builder setGroupWebNotice(com.akaxin.proto.core.CoreProto.GroupWebNotice value) {
        copyOnWrite();
        instance.setGroupWebNotice(value);
        return this;
        }
      /**
       * <pre>
       *群组web通知消息
       * </pre>
       *
       * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
       */
      public Builder setGroupWebNotice(
          com.akaxin.proto.core.CoreProto.GroupWebNotice.Builder builderForValue) {
        copyOnWrite();
        instance.setGroupWebNotice(builderForValue);
        return this;
      }
      /**
       * <pre>
       *群组web通知消息
       * </pre>
       *
       * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
       */
      public Builder mergeGroupWebNotice(com.akaxin.proto.core.CoreProto.GroupWebNotice value) {
        copyOnWrite();
        instance.mergeGroupWebNotice(value);
        return this;
      }
      /**
       * <pre>
       *群组web通知消息
       * </pre>
       *
       * <code>optional .core.GroupWebNotice groupWebNotice = 25;</code>
       */
      public Builder clearGroupWebNotice() {  copyOnWrite();
        instance.clearGroupWebNotice();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:site.ImCtsMessageRequest)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest other = (com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,    other.type_ != 0, other.type_);
          text_ = visitor.visitMessage(text_, other.text_);
          secretText_ = visitor.visitMessage(secretText_, other.secretText_);
          groupText_ = visitor.visitMessage(groupText_, other.groupText_);
          groupSecretText_ = visitor.visitMessage(groupSecretText_, other.groupSecretText_);
          image_ = visitor.visitMessage(image_, other.image_);
          secretImage_ = visitor.visitMessage(secretImage_, other.secretImage_);
          groupImage_ = visitor.visitMessage(groupImage_, other.groupImage_);
          groupSecretImage_ = visitor.visitMessage(groupSecretImage_, other.groupSecretImage_);
          voice_ = visitor.visitMessage(voice_, other.voice_);
          secretVoice_ = visitor.visitMessage(secretVoice_, other.secretVoice_);
          groupVoice_ = visitor.visitMessage(groupVoice_, other.groupVoice_);
          groupSecretVoice_ = visitor.visitMessage(groupSecretVoice_, other.groupSecretVoice_);
          u2Map_ = visitor.visitMessage(u2Map_, other.u2Map_);
          u2SecretMap_ = visitor.visitMessage(u2SecretMap_, other.u2SecretMap_);
          groupMap_ = visitor.visitMessage(groupMap_, other.groupMap_);
          groupSecretMap_ = visitor.visitMessage(groupSecretMap_, other.groupSecretMap_);
          u2MsgNotice_ = visitor.visitMessage(u2MsgNotice_, other.u2MsgNotice_);
          groupMsgNotice_ = visitor.visitMessage(groupMsgNotice_, other.groupMsgNotice_);
          u2Recall_ = visitor.visitMessage(u2Recall_, other.u2Recall_);
          groupRecall_ = visitor.visitMessage(groupRecall_, other.groupRecall_);
          u2Web_ = visitor.visitMessage(u2Web_, other.u2Web_);
          groupWeb_ = visitor.visitMessage(groupWeb_, other.groupWeb_);
          u2WebNotice_ = visitor.visitMessage(u2WebNotice_, other.u2WebNotice_);
          groupWebNotice_ = visitor.visitMessage(groupWebNotice_, other.groupWebNotice_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
                case 18: {
                  com.akaxin.proto.core.CoreProto.MsgText.Builder subBuilder = null;
                  if (text_ != null) {
                    subBuilder = text_.toBuilder();
                  }
                  text_ = input.readMessage(com.akaxin.proto.core.CoreProto.MsgText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(text_);
                    text_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 26: {
                  com.akaxin.proto.core.CoreProto.MsgSecretText.Builder subBuilder = null;
                  if (secretText_ != null) {
                    subBuilder = secretText_.toBuilder();
                  }
                  secretText_ = input.readMessage(com.akaxin.proto.core.CoreProto.MsgSecretText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(secretText_);
                    secretText_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 34: {
                  com.akaxin.proto.core.CoreProto.GroupText.Builder subBuilder = null;
                  if (groupText_ != null) {
                    subBuilder = groupText_.toBuilder();
                  }
                  groupText_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupText_);
                    groupText_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 42: {
                  com.akaxin.proto.core.CoreProto.GroupSecretText.Builder subBuilder = null;
                  if (groupSecretText_ != null) {
                    subBuilder = groupSecretText_.toBuilder();
                  }
                  groupSecretText_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupSecretText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupSecretText_);
                    groupSecretText_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 50: {
                  com.akaxin.proto.core.CoreProto.MsgImage.Builder subBuilder = null;
                  if (image_ != null) {
                    subBuilder = image_.toBuilder();
                  }
                  image_ = input.readMessage(com.akaxin.proto.core.CoreProto.MsgImage.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(image_);
                    image_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 58: {
                  com.akaxin.proto.core.CoreProto.MsgSecretImage.Builder subBuilder = null;
                  if (secretImage_ != null) {
                    subBuilder = secretImage_.toBuilder();
                  }
                  secretImage_ = input.readMessage(com.akaxin.proto.core.CoreProto.MsgSecretImage.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(secretImage_);
                    secretImage_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 66: {
                  com.akaxin.proto.core.CoreProto.GroupImage.Builder subBuilder = null;
                  if (groupImage_ != null) {
                    subBuilder = groupImage_.toBuilder();
                  }
                  groupImage_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupImage.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupImage_);
                    groupImage_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 74: {
                  com.akaxin.proto.core.CoreProto.GroupSecretImage.Builder subBuilder = null;
                  if (groupSecretImage_ != null) {
                    subBuilder = groupSecretImage_.toBuilder();
                  }
                  groupSecretImage_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupSecretImage.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupSecretImage_);
                    groupSecretImage_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 82: {
                  com.akaxin.proto.core.CoreProto.MsgVoice.Builder subBuilder = null;
                  if (voice_ != null) {
                    subBuilder = voice_.toBuilder();
                  }
                  voice_ = input.readMessage(com.akaxin.proto.core.CoreProto.MsgVoice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(voice_);
                    voice_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 90: {
                  com.akaxin.proto.core.CoreProto.MsgSecretVoice.Builder subBuilder = null;
                  if (secretVoice_ != null) {
                    subBuilder = secretVoice_.toBuilder();
                  }
                  secretVoice_ = input.readMessage(com.akaxin.proto.core.CoreProto.MsgSecretVoice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(secretVoice_);
                    secretVoice_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 98: {
                  com.akaxin.proto.core.CoreProto.GroupVoice.Builder subBuilder = null;
                  if (groupVoice_ != null) {
                    subBuilder = groupVoice_.toBuilder();
                  }
                  groupVoice_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupVoice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupVoice_);
                    groupVoice_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 106: {
                  com.akaxin.proto.core.CoreProto.GroupSecretVoice.Builder subBuilder = null;
                  if (groupSecretVoice_ != null) {
                    subBuilder = groupSecretVoice_.toBuilder();
                  }
                  groupSecretVoice_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupSecretVoice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupSecretVoice_);
                    groupSecretVoice_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 114: {
                  com.akaxin.proto.core.CoreProto.U2Map.Builder subBuilder = null;
                  if (u2Map_ != null) {
                    subBuilder = u2Map_.toBuilder();
                  }
                  u2Map_ = input.readMessage(com.akaxin.proto.core.CoreProto.U2Map.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(u2Map_);
                    u2Map_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 122: {
                  com.akaxin.proto.core.CoreProto.U2SecretMap.Builder subBuilder = null;
                  if (u2SecretMap_ != null) {
                    subBuilder = u2SecretMap_.toBuilder();
                  }
                  u2SecretMap_ = input.readMessage(com.akaxin.proto.core.CoreProto.U2SecretMap.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(u2SecretMap_);
                    u2SecretMap_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 130: {
                  com.akaxin.proto.core.CoreProto.GroupMap.Builder subBuilder = null;
                  if (groupMap_ != null) {
                    subBuilder = groupMap_.toBuilder();
                  }
                  groupMap_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupMap.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupMap_);
                    groupMap_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 138: {
                  com.akaxin.proto.core.CoreProto.GroupSecretMap.Builder subBuilder = null;
                  if (groupSecretMap_ != null) {
                    subBuilder = groupSecretMap_.toBuilder();
                  }
                  groupSecretMap_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupSecretMap.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupSecretMap_);
                    groupSecretMap_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 146: {
                  com.akaxin.proto.core.CoreProto.U2MsgNotice.Builder subBuilder = null;
                  if (u2MsgNotice_ != null) {
                    subBuilder = u2MsgNotice_.toBuilder();
                  }
                  u2MsgNotice_ = input.readMessage(com.akaxin.proto.core.CoreProto.U2MsgNotice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(u2MsgNotice_);
                    u2MsgNotice_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 154: {
                  com.akaxin.proto.core.CoreProto.GroupMsgNotice.Builder subBuilder = null;
                  if (groupMsgNotice_ != null) {
                    subBuilder = groupMsgNotice_.toBuilder();
                  }
                  groupMsgNotice_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupMsgNotice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupMsgNotice_);
                    groupMsgNotice_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 162: {
                  com.akaxin.proto.core.CoreProto.U2Recall.Builder subBuilder = null;
                  if (u2Recall_ != null) {
                    subBuilder = u2Recall_.toBuilder();
                  }
                  u2Recall_ = input.readMessage(com.akaxin.proto.core.CoreProto.U2Recall.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(u2Recall_);
                    u2Recall_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 170: {
                  com.akaxin.proto.core.CoreProto.GroupRecall.Builder subBuilder = null;
                  if (groupRecall_ != null) {
                    subBuilder = groupRecall_.toBuilder();
                  }
                  groupRecall_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupRecall.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupRecall_);
                    groupRecall_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 178: {
                  com.akaxin.proto.core.CoreProto.U2Web.Builder subBuilder = null;
                  if (u2Web_ != null) {
                    subBuilder = u2Web_.toBuilder();
                  }
                  u2Web_ = input.readMessage(com.akaxin.proto.core.CoreProto.U2Web.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(u2Web_);
                    u2Web_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 186: {
                  com.akaxin.proto.core.CoreProto.GroupWeb.Builder subBuilder = null;
                  if (groupWeb_ != null) {
                    subBuilder = groupWeb_.toBuilder();
                  }
                  groupWeb_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupWeb.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupWeb_);
                    groupWeb_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 194: {
                  com.akaxin.proto.core.CoreProto.U2WebNotice.Builder subBuilder = null;
                  if (u2WebNotice_ != null) {
                    subBuilder = u2WebNotice_.toBuilder();
                  }
                  u2WebNotice_ = input.readMessage(com.akaxin.proto.core.CoreProto.U2WebNotice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(u2WebNotice_);
                    u2WebNotice_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 202: {
                  com.akaxin.proto.core.CoreProto.GroupWebNotice.Builder subBuilder = null;
                  if (groupWebNotice_ != null) {
                    subBuilder = groupWebNotice_.toBuilder();
                  }
                  groupWebNotice_ = input.readMessage(com.akaxin.proto.core.CoreProto.GroupWebNotice.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(groupWebNotice_);
                    groupWebNotice_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:site.ImCtsMessageRequest)
    private static final com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ImCtsMessageRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.akaxin.proto.site.ImCtsMessageProto.ImCtsMessageRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ImCtsMessageRequest> PARSER;

    public static com.google.protobuf.Parser<ImCtsMessageRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
